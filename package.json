{
	"publisher": "fujidana",
	"name": "spec-command",
	"displayName": "spec command",
	"description": "spec command file support for VS Code",
	"version": "2.0.0",
	"engines": {
		"vscode": "^1.100.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters"
	],
	"icon": "resources/icon.png",
	"keywords": [
		"X-ray diffraction",
		"synchrotron",
		"instrument control",
		"data acquisition"
	],
	"license": "SEE LICENSE IN LICENSE.txt",
	"bugs": {
		"url": "https://github.com/fujidana/vscode-spec-command/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/fujidana/vscode-spec-command.git"
	},
	"homepage": "https://github.com/fujidana/vscode-spec-command#readme",
	"activationEvents": [
		"onFileSystem:spec-command"
	],
	"main": "./dist/node/extension.js",
	"browser": "./dist/web/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "spec-command",
				"aliases": [
					"spec command",
					"spec macro"
				],
				"extensions": [
					".mac"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "spec-command",
				"scopeName": "source.spec-command",
				"path": "./syntaxes/specCommand.tmLanguage.json"
			}
		],
		"snippets": [
			{
				"language": "spec-command",
				"path": "./syntaxes/specCommand.snippets.json"
			}
		],
		"commands": [
			{
				"command": "spec-command.showBuiltInSymbols",
				"title": "Show Built-in Symbols",
				"category": "spec command",
				"icon": "$(references)"
			},
			{
				"command": "spec-command.showWorkspaceSymbolsJson",
				"title": "Show Workspace Symbols (JSON)",
				"category": "spec command",
				"icon": "$(json)"
			},
			{
				"command": "spec-command.inspectSyntaxTree",
				"title": "Inspect Syntax Tree (Developer)",
				"category": "spec command",
				"icon": "$(json)"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "spec-command.showBuiltInSymbols"
				},
				{
					"command": "spec-command.showWorkspaceSymbolsJson",
					"when": "workspaceFolderCount > 0"
				},
				{
					"command": "spec-command.inspectSyntaxTree",
					"when": "editorLangId == spec-command"
				}
			]
		},
		"configuration": {
			"title": "spec command",
			"properties": {
				"spec-command.showSymbolsInPreview": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Shows a preview (Webview created by built-in Markdown extension) in addition to a markdown source after [Show Built-in Symbols](command:spec-command.showBuiltInSymbols) command is invoked."
				},
				"spec-command.specVersion": {
					"type": "string",
					"default": "6.13.4",
					"markdownDescription": "Specifies the target version of __spec__ software. This affects code completion.",
					"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
					"patternErrorMessage": "The value must be in the Semantic Versioning 2.0.0 format. Set \"6.1.2\" for \"6.01.04\" since the format does not allow redundant zeros."
				},
				"spec-command.suggest.suppressMessages": {
					"type": "object",
					"markdownDescription": "Suppresses messages shown in code completion.",
					"default": {
						"completionItem.label.detail": false,
						"completionItem.label.description": false,
						"completionItem.documentation": false,
						"hover.contents": false,
						"signatureHelp.signatures.documentation": false
					},
					"properties": {
						"completionItem.label.detail": {
							"type": "boolean",
							"default": false,
							"description": "Hides the detail of unresolved completion item labels, where parameters of functions are typically shown."
						},
						"completionItem.label.description": {
							"type": "boolean",
							"default": false,
							"description": "Hides the description of unresolved completion item labels, where file paths are typically shown."
						},
						"completionItem.documentation": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text of a selected item of auto completion suggestions to a sentence."
						},
						"hover.contents": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text in a hover, which is shown when the mouse cursor is on a symbol, to a paragraph."
						},
						"signatureHelp.signatures.documentation": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text in a signature help, which is shown when the user edits function arguments, to a paragraph."
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.codeSnippets": {
					"type": "object",
					"scope": "window",
					"markdownDescription": "Lists key-value pairs of code snippets for IntelliSense code suggestion. The key is a snippet name on which IntelliSense substring matching is performed and the value is a snippet template to be inserted into the editor. The template may contain special placeholders for motors (`%MOT`) and counters (`%CNT`), in addition to built-in tabstops, placeholders, choise and variables described in [Snippets in Visual Studio Code](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax). Descriptive text can follow after a hash sign (`#`). Example: \n\n```json\n{ \"mv2\": \"mv ${1%MOT1} ${2:pos1} ${3%MOT2} ${4:pos2} # 2-motor move\" }\n```",
					"default": {},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_\\-]*$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.motors": {
					"type": "object",
					"scope": "window",
					"markdownDescription": "Lists key-value (mnemonic-explanatory text) pairs of motors for IntelliSense code suggestion.",
					"default": {},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]{0,6}$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.counters": {
					"type": "object",
					"scope": "window",
					"markdownDescription": "Lists key-value (mnemonic-explanatory text) pairs of counters for IntelliSense code suggestion.",
					"default": {
						"sec": "count time in second"
					},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]{0,6}$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.symbolFile": {
					"type": "string",
					"default": "",
					"scope": "window",
					"markdownDescription": "Specifies the absolute path to a JSON file in which symbols are defined. The following predefined variables are supported for the path: `${userHome}`, `${workspaceFolder}`. See a JSON file created by [Show Workspace Symbols (JSON)](command:spec-command.showWorkspaceSymbolsJson) command for the file format.",
					"tags": [
						"experimental"
					]
				},
				"spec-command.workspace.exclude": {
					"type": "array",
					"default": [],
					"scope": "resource",
					"markdownDescription": "Configures [glob patterns](https://code.visualstudio.com/docs/editor/glob-patterns) for files to be excluded from the target of symbol collections for IntelliSense features.",
					"items": {
						"type": "string"
					}
				},
				"spec-command.workspace.diagnoseProblems": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "Controls whether diagnostic results of files in a workspace are listed in 'Problems' view. If disabled, only syntax problems of files opened by editors are listed."
				},
				"spec-command.problems.rules": {
					"type": "object",
					"tags": [
						"experimental"
					],
					"scope": "resource",
					"markdownDescription": "Controls whether specific types of diagnostics are shown in the Problem view.",
					"properties": {
						"no-local-outside-block": {
							"type": "boolean",
							"default": false
						},
						"no-undeclared-variable": {
							"type": "boolean",
							"default": false
						},
						"no-undeclared-macro-argument": {
							"type": "boolean",
							"default": false
						}
					},
					"additionalProperties": false
				},
				"spec-command.terminal.filePathPrefix": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a file path prefix used when a file is dropped on the editor. This option is useful for case in which the working directory of __spec__ running in a terminal view is different from the workspace folder.",
					"markdownDeprecationMessage": "**Deprecated**: Not effective now."
				}
			}
		}
	},
	"capabilities": {
		"virtualWorkspaces": true,
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "The \"spec-command.terminal.filePathPrefix\" `and \"spec-command.suggest.symbolFile\" configuration properties are disabled in untrusted workspaces in order to protect from code injection.",
			"restrictedConfigurations": [
				"spec-command.terminal.filePathPrefix",
				"spec-command.suggest.symbolFile"
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "pnpm run js-yaml && pnpm run package",
		"compile": "pnpm run compile:peggy && pnpm run check-types && pnpm run lint && node esbuild.js",
		"compile:peggy": "peggy --dts --cache src/parser.peggy",
		"watch": "npm-run-all -p watch:*",
		"watch:peggy": "peggy -w --dts --cache src/parser.peggy",
		"watch:esbuild": "node esbuild.js --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"package": "pnpm run compile:peggy && pnpm run check-types && pnpm run lint && node esbuild.js --production",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "pnpm run compile && pnpm run compile-tests",
		"pretest-web": "pnpm run compile",
		"check-types": "tsc --noEmit",
		"lint": "eslint src",
		"test": "vscode-test",
		"test-web": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. --extensionTestsPath=dist/web/test/extensionTests.js",
		"run-in-browser": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. .",
		"js-yaml": "npm-run-all js-yaml:*",
		"js-yaml:snippets": "js-yaml syntaxes/specCommand.snippets.yaml > syntaxes/specCommand.snippets.json",
		"js-yaml:builtIns": "js-yaml syntaxes/specCommand.builtIns.yaml > syntaxes/specCommand.builtIns.json",
		"js-yaml:tmLanguage": "js-yaml syntaxes/specCommand.tmLanguage.yaml > syntaxes/specCommand.tmLanguage.json"
	},
	"dependencies": {
		"estraverse": "^5.3.0",
		"semver": "^7.7.2"
	},
	"devDependencies": {
		"@esbuild-plugins/node-globals-polyfill": "^0.2.3",
		"@types/assert": "^1.5.11",
		"@types/mocha": "^10.0.10",
		"@types/node": "20.x",
		"@types/semver": "^7.7.0",
		"@types/vscode": "^1.100.0",
		"@typescript-eslint/eslint-plugin": "^8.31.1",
		"@typescript-eslint/parser": "^8.31.1",
		"@vscode/test-cli": "^0.0.11",
		"@vscode/test-electron": "^2.5.2",
		"@vscode/test-web": "^0.0.71",
		"assert": "^2.1.0",
		"esbuild": "^0.25.3",
		"eslint": "^9.25.1",
		"glob": "^11.0.2",
		"js-yaml": "^4.1.0",
		"mocha": "^11.1.0",
		"npm-run-all": "^4.1.5",
		"peggy": "^5.0.3",
		"typescript": "^5.8.3"
	}
}