{
	"publisher": "fujidana",
	"name": "spec-command",
	"displayName": "spec command",
	"description": "spec command file support for VS Code",
	"version": "1.8.9-alpha.2",
	"engines": {
		"vscode": "^1.100.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters"
	],
	"icon": "resources/icon.png",
	"keywords": [
		"X-ray diffraction",
		"synchrotron",
		"instrument control",
		"data acquisition"
	],
	"license": "SEE LICENSE IN LICENSE",
	"bugs": {
		"url": "https://github.com/fujidana/vscode-spec-command/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/fujidana/vscode-spec-command.git"
	},
	"homepage": "https://github.com/fujidana/vscode-spec-command#readme",
	"activationEvents": [],
	"main": "./dist/node/extension.js",
	"browser": "./dist/web/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "spec-command",
				"aliases": [
					"spec command",
					"spec macro"
				],
				"extensions": [
					".mac"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "spec-command",
				"scopeName": "source.spec-command",
				"path": "./syntaxes/specCommand.tmLanguage.json"
			}
		],
		"snippets": [
			{
				"language": "spec-command",
				"path": "./syntaxes/specCommand.snippets.json"
			}
		],
		"commands": [
			{
				"command": "spec-command.openReferenceManual",
				"title": "Open Reference Manual",
				"category": "spec command",
				"icon": "$(references)"
			},
			{
				"command": "spec-command.previewAST",
				"title": "Preview spec-command AST",
				"category": "spec command",
				"icon": "$(json)"
			},
			{
				"command": "spec-command.execSelectionInTerminal",
				"title": "Run Selction/Line in Active Terminal",
				"category": "spec command",
				"icon": "$(play)"
			},
			{
				"command": "spec-command.execFileInTerminal",
				"title": "Run File in Active Terminal",
				"category": "spec command",
				"icon": "$(run-all)"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "spec-command.openReferenceManual"
				},
				{
					"command": "spec-command.previewAST",
					"when": "editorLangId == spec-command"
				},
				{
					"command": "spec-command.execSelectionInTerminal",
					"when": "shellExecutionSupported && editorLangId == 'spec-command'"
				},
				{
					"command": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && editorLangId == 'spec-command'"
				}
			],
			"explorer/context": [
				{
					"command": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && resourceLangId == 'spec-command'",
					"group": "9_speccommand"
				}
			],
			"editor/title": [
				{
					"command": "spec-command.execSelectionInTerminal",
					"alt": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && editorLangId == 'spec-command'",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "spec-command.execSelectionInTerminal",
					"when": "shellExecutionSupported && editorTextFocus && editorLangId == 'spec-command'",
					"group": "9_speccommand"
				},
				{
					"command": "spec-command.execFileInTerminal",
					"when": "shellExecutionSupported && editorTextFocus && editorLangId == 'spec-command'",
					"group": "9_speccommand"
				}
			]
		},
		"keybindings": [
			{
				"command": "spec-command.execSelectionInTerminal",
				"key": "shift+enter",
				"when": "shellExecutionSupported && editorTextFocus && editorLangId == 'spec-command'"
			}
		],
		"configuration": {
			"title": "spec command",
			"properties": {
				"spec-command.showReferenceManualInPreview": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Shows a preview (Webview created by built-in Markdown extension) in addition to a markdown source after [Open Reference Manual](command:spec-command.openReferenceManual) command is invoked."
				},
				"spec-command.editor.hintVolume.hover": {
					"type": "string",
					"default": "full",
					"description": "Controls the volume of explanatory text in hovers, which is shown when the mouse cursor is on a symbol.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.suppressMessages#` instead.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.hintVolume.completionItem": {
					"type": "string",
					"default": "sentence",
					"description": "Controls the volume of explanatory text in auto completion, which is shown when the user types a symbol.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.suppressMessages#` instead.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.hintVolume.signatureHelp": {
					"type": "string",
					"default": "sentence",
					"description": "Controls the volume of explanatory text in signature help, which is shown when the user edits function arguments.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.suppressMessages#` instead.",
					"enum": [
						"sentence",
						"paragraph",
						"full"
					]
				},
				"spec-command.editor.codeSnippets": {
					"type": "array",
					"default": [],
					"markdownDescription": "Lists code snippet templates that may include a placeholder of motor (`%MOT`) or counter (`%CNT`) mnemonics in TextMate snippet syntax. Read [Snippets in Visual Studio Code](https://code.visualstudio.com/docs/editor/userdefinedsnippets) for other information about the syntax. Example: `mv ${1%MOT} ${2:pos} # absolute move`.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.codeSnippets#` instead.",
					"items": {
						"type": "string",
						"pattern": "^(([a-zA-Z_][a-zA-Z0-9_]*)\\s+[^#]+?)\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.suggest.suppressMessages": {
					"type": "object",
					"markdownDescription": "Suppresses messages shown in code completion.",
					"default": {
						"completionItem.label.detail": false,
						"completionItem.label.description": false,
						"completionItem.documentation": false,
						"hover.contents": false,
						"signatureHelp.signatures.documentation": false
					},
					"properties": {
						"completionItem.label.detail": {
							"type": "boolean",
							"default": false,
							"description": "Hides the detail of unresolved completion item labels, where parameters of functions are typically shown."
						},
						"completionItem.label.description": {
							"type": "boolean",
							"default": false,
							"description": "Hides the description of unresolved completion item labels, where file paths are typically shown."
						},
						"completionItem.documentation": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text of a selected item of auto completion suggestions to a sentence."
						},
						"hover.contents": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text in a hover, which is shown when the mouse cursor is on a symbol, to a paragraph."
						},
						"signatureHelp.signatures.documentation": {
							"type": "boolean",
							"default": false,
							"description": "Truncates explanatory text in a signature help, which is shown when the user edits function arguments, to a paragraph."
						}
					},
					"additionalProperties": false
				},
				"spec-command.mnemonic.motors": {
					"type": "array",
					"default": [],
					"markdownDescription": "Lists motor mnemonics, which will be used by IntelliSense and code snippets. One can optionally add the description after `#` letter. Example: `tth # Detector's two-theta angle`.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.motors#` instead.",
					"items": {
						"type": "string",
						"pattern": "^([a-zA-Z_][a-zA-Z0-9_]{0,6})\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.mnemonic.counters": {
					"type": "array",
					"default": [
						"sec # count time in second"
					],
					"markdownDescription": "Lists counter mnemonics, which will be used by IntelliSense and code snippets. One can optionally add the descriptions after `#` letter. Example: `sec # count time in second`.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.suggest.counters#` instead.",
					"items": {
						"type": "string",
						"pattern": "^([a-zA-Z_][a-zA-Z0-9_]{0,6})\\s*(#\\s*(.*))?$"
					}
				},
				"spec-command.suggest.codeSnippets": {
					"type": "object",
					"scope": "resource",
					"markdownDescription": "Lists key-value pairs of code snippets for IntelliSense code suggestion. The key is a snippet name on which IntelliSense substring matching is performed and the value is a snippet template to be inserted into the editor. The template may contain special placeholders for motors (`%MOT`) and counters (`%CNT`), in addition to built-in tabstops, placeholders, choise and variables described in [Snippets in Visual Studio Code](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax). Descriptive text can follow after a hash sign (`#`). Example: \n\n```json\n{ \"mv2\": \"mv ${1%MOT1} ${2:pos1} ${3%MOT2} ${4:pos2} # 2-motor move\" }\n```",
					"default": {},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_\\-]*$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.motors": {
					"type": "object",
					"scope": "resource",
					"markdownDescription": "Lists key-value (mnemonic-explanatory text) pairs of motors for IntelliSense code suggestion.",
					"default": {},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]{0,6}$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.suggest.counters": {
					"type": "object",
					"scope": "resource",
					"markdownDescription": "Lists key-value (mnemonic-explanatory text) pairs of counters for IntelliSense code suggestion.",
					"default": {
						"sec": "count time in second"
					},
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]{0,6}$": {
							"type": "string"
						}
					},
					"additionalProperties": false
				},
				"spec-command.workspace.inclusiveFilePattern": {
					"type": "string",
					"default": "**/*.mac",
					"scope": "resource",
					"markdownDescription": "Specifies a glob pattern used to find files in a workspace. Symbols in pattern-matched files becomes available in code navigation. See [VS Code API](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) for the syntax.",
					"markdownDeprecationMessage": "**Deprecated**: Please use the built-in `#files.associations#` property, instead."
				},
				"spec-command.workspace.exclusiveFilePattern": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a glob pattern used to exclude files in a workspace from being parsed. See [VS Code API](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) for the syntax.",
					"markdownDeprecationMessage": "**Deprecated**: Please use the built-in `#files.exclude#` property, instead."
				},
				"spec-command.workspace.diagnoseProblems": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "Controls whether diagnostic results of files in a workspace are listed in 'Problems' view. If disabled, only syntax problems of files opened by editors are listed."
				},
				"spec-command.terminal.filePathPrefix": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a file path prefix used in [Run File in Active Terminal](command:spec-command.execFileInTerminal) command. This option is useful for case in which the working directory of __spec__ running in a terminal view is different from the workspace folder."
				},
				"spec-command.command.filePathPrefixInTerminal": {
					"type": "string",
					"default": "",
					"scope": "resource",
					"markdownDescription": "Specifies a file path prefix used in [Run File in Active Terminal](command:spec-command.execFileInTerminal) command. This option is useful for case in which the working directory of __spec__ running in a terminal view is different from the workspace folder.",
					"markdownDeprecationMessage": "**Deprecated**: Please use `#spec-command.terminal.filePathPrefix#` instead."
				}
			}
		}
	},
	"capabilities": {
		"virtualWorkspaces": true,
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "The \"spec-command.terminal.filePathPrefix\" configuration property is disabled in untrusted workspaces in order to protect from code injection when the \"Run File in Active Terminal\" command is called.",
			"restrictedConfigurations": [
				"spec-command.terminal.filePathPrefix"
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "pnpm run peggy && pnpm run js-yaml && pnpm run package",
		"compile": "webpack",
		"watch": "webpack --watch",
		"package": "webpack --mode production --devtool hidden-source-map",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest-node": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
		"test-node": "vscode-test",
		"pretest-web": "pnpm run compile",
		"test-web": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. --extensionTestsPath=dist/web/test/index.js",
		"lint": "eslint src",
		"run-in-browser": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. .",
		"js-yaml": "pnpm run js-yaml:snippets && pnpm run js-yaml:apiReference && pnpm run js-yaml:tmLanguage",
		"js-yaml:snippets": "js-yaml ./src/specCommand.snippets.yaml > ./syntaxes/specCommand.snippets.json",
		"js-yaml:apiReference": "js-yaml ./src/specCommand.apiReference.yaml > ./syntaxes/specCommand.apiReference.json",
		"js-yaml:tmLanguage": "js-yaml ./src/specCommand.tmLanguage.yaml > ./syntaxes/specCommand.tmLanguage.json",
		"peggy": "peggy -c ./src/pegconfig.json"
	},
	"dependencies": {
		"estraverse": "^5.3.0"
	},
	"devDependencies": {
		"@types/assert": "^1.5.11",
		"@types/estraverse": "^5.1.7",
		"@types/estree": "^1.0.7",
		"@types/mocha": "^10.0.10",
		"@types/node": "20.x",
		"@types/vscode": "^1.100.0",
		"@types/webpack-env": "^1.18.8",
		"@typescript-eslint/eslint-plugin": "^8.31.1",
		"@typescript-eslint/parser": "^8.31.1",
		"@vscode/test-cli": "^0.0.10",
		"@vscode/test-electron": "^2.5.2",
		"@vscode/test-web": "^0.0.69",
		"assert": "^2.1.0",
		"eslint": "^9.25.1",
		"js-yaml": "^4.1.0",
		"mocha": "^11.1.0",
		"peggy": "^3.0.2",
		"process": "^0.11.10",
		"ts-loader": "^9.5.2",
		"ts-pegjs": "^4.2.1",
		"typescript": "^5.8.3",
		"webpack": "^5.99.7",
		"webpack-cli": "^6.0.1"
	},
	"packageManager": "pnpm@10.4.1+sha512.c753b6c3ad7afa13af388fa6d808035a008e30ea9993f58c6663e2bc5ff21679aa834db094987129aa4d488b86df57f7b634981b2f827cdcacc698cc0cfb88af"
}
