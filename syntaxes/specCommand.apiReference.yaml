# Syntax Description #

## Variables ##

### Built-In Variables ###

constants:
  CCDS:
    signature: CCDS
    description: |-
      is the number of 2D image-type devices being used as determined from reading the *config* file.
  COUNTERS:
    signature: COUNTERS
    description: |-
      is the number of counters being used as determined from reading the *config* file.
  CWD:
    signature: CWD
    description: |-
      is a string-valued variable that contains the name of the user’s current working directory.
      It is assigned a value when **spec** starts up, and is updated each time the `chdir()` function is executed.
  FRESH:
    signature: FRESH
    description: |-
      is a built-in variable that has an initial nonzero value if **spec** was invoked with the **−f** (fresh start) flag or if a fresh start was forced by an incompatible state file version.
      The value is zero otherwise, and is set to zero in any case after all start-up command files and macros have been read and their commands executed.
      In the standard start-up macros, the value of `FRESH` is checked to see if initial default parameter assignments should be made.
  HOME:
    signature: HOME
    description: |-
      is string valued and is initialized to the user’s home directory as taken from the environment variable *HOME*.
      If not found in the environment, its value is set to the current directory.
  HOSTNAME:
    signature: HOSTNAME
    description: |-
      is a built-in variable containing the platform host name as returned by the *gethostname()* system call.
  IS_SERVER:
    signature: IS_SERVER
    description: |-
      is a built-in variable that contains the TCP port number on which **spec** is listening if running in server mode.
      Otherwise, the value is zero.
  MCAS:
    signature: MCAS
    description: |-
      is the number of 1D MCA-type devices being used as determined from reading the *config* file.
  MOTORS:
    signature: MOTORS
    description: |-
      is the number of motors being used as determined from reading the *config* file.
  OUTFILES:
    signature: OUTFILES[][]
    description: |-
      is a two-dimensional associative array that holds information about all open output files.
      The first index is the name by which the file was opened using `open()`, `on()`, `fprintf()` or the `-l outputfile` start-up option.
      Currently, only two options are available for the second index: `"name"` and `"path"`.
      The `"name"` element repeats the name used for the first index.
      The `"path"` element is the full path name of the file.
      Additional elements may be added in the future.
      For example:

      ```
      5.FOURC> for (i in OUTFILES[]["name"])
      6.more>      printf("%10s %s\n",OUTFILES[i]["name"],OUTFILES[i]["path"])
            dlog /tmp/dlog
          data1 /tmp/data1
            tty /dev/tty
      /dev/null /dev/null
      7.FOURC>
      ```

      or

      ```
      7.FOURC> p OUTFILES[DATAFILE]["path"]
      /private/tmp/data1
      8.FOURC>
      ```

      Note, the special built-in name `"pipe"` is not included in `OUTFILES`.
      The special built-in name `"/dev/null"` includes the full path in both `"name"` and `"path"` to work with the standard macros that always refer to that special file by the full path name.
  PI:
    signature: PI
    description: |-
      is a number-valued symbol with the value 3.14159….
  SPEC:
    signature: SPEC
    description: |-
      is string valued and set to the name by which **spec** is invoked, such as *fourc*.
  SPECD:
    signature: SPECD
    description: |-
      is string valued and set to **spec**’s auxiliary file directory.
      The default name is compiled in when **spec** is installed, but can be overridden by the **−D** invocation option or by the *SPECD* environment variable.
  USER:
    signature: USER
    description: |-
      is string valued and is set to the login name of the current user.
  VERSION:
    signature: VERSION
    description: |-
      is string valued and is set to the version number of **spec**, as in `3.03.11`.

  ### documented not in spec_manA4.pdf but in CSS spec help pages (https://www.certif.com/spec_help/index.html).

  SPEC_PID:
    signature: SPEC_PID
    comments: 'cited from [CSS spec help pages: chg6_09](https://www.certif.com/spec_help/chg6_09.html).'
    description: |-
      contains the process ID of the **spec** process.

      (Added in spec release 6.09.05.)
  HISTCMD:
    signature: HISTCMD
    comments: 'cited from [CSS spec help pages: chg6_10](https://www.certif.com/spec_help/chg6_10.html).'
    description: |-
      is the command line history number.
      That is the name used for the same item in the standard bash and zsh shells.
      `HISTCMD` is used in the new standard `highlight` macro.

      (Added in spec release 6.10.01.)
  HDF5_VERSION:
    signature: HDF5_VERSION
    comments: 'cited from [CSS spec help pages: hdf5](https://certif.com/spec_help/hdf5.html).'
    description: |-
      contains the HDF5 version used when compiling **spec**, as in "1.8.13".
      Note, its value will not be set until the first call of one of the above functions.
  STATE_FILE:
    signature: STATE_FILE
    comments: 'cited from [CSS spec help pages: chg6_12](https://www.certif.com/spec_help/chg6_12.html).'
    description: |-
      is set to the full path name of the user state file.
      The `save_state` macro will use its value, which allows the macro to work even if **spec**
      was invoked with the `-T` or `-U` flags, which create alternate tty or user names that are 
      used to name the **spec** session's associated state file.

      (Added in spec release 6.12.05.)
  SPEC_COMMAND:
    signature: SPEC_COMMAND
    comments: 'cited from [CSS spec help pages: chg6_13](https://www.certif.com/spec_help/chg6_13.html).'
    description: |-
      is set to the command line by which spec was invoked.

      (Added in spec release 6.13.03.)

variables:
  A:
    signature: A[]
    description: |-
      is an array dimensioned to the number of motors as obtained from the *config* file.
      The function `read_motors(0)` fills the array with user angles.
      The user can assign values to any of the elements.
      The commands `move_all` and `move_cnt` use the values in the array.
      Also, the various site-dependent, geometry-specific calculations, accessed through the `calc()` userhook function, base their results on the values in this array or place new values in it.
  COLS:
    signature: COLS
    description: |-
      is a number-valued variable set to the number of text columns on the user terminal or workstation window.
      The value is used for formatting text-mode plots and on-line help files.
      `COLS` is generally automatically assigned a value from the system terminal data base when **spec** starts up, or, if available, by using the `TIOCGWINSZ` command in the *ioctl()* system call whenever a value for `COLS` is needed.
  DEBUG:
    signature: DEBUG
    description: |-
      is a user-assignable numeric variable that determines the level of debugging messages printed.
      The level is determined by the sum of the values given in this table:

      | Hex | Decimal | What is shown |
      | ---: | ---: | :--- |
      | 0x1 | 1 | Show input tokens during parsing. |
      | 0x2 | 2 | Show node execution while running. |
      | 0x4 | 4 | Show node allocate and free. |
      | 0x8 | 8 | Show symbol table creation and lookup. |
      | 0x10 | 16 | Show value get and set. |
      | 0x20 | 32 | Show misc info. |
      | 0x40 | 64 | Show hardware related info. |
      | 0x80 | 128 | Show more hardware related info. |
      | 0x100 | 256 | Show macro substitution. |
      | 0x200 | 512 | Show memory allocate and free. |
      | 0x400 | 1024 | Show input after macro expansion. 0x800 2048 Print warning messages. |
      | 0x1000 | 4096 | Show certain low level hardware info. |
      | 0x2000 | 8192 | Show data array allocation. |
      | 0x4000 | | Show signal blocking. |
      | 0x8000 | | Show sleeps and other low level hardware info. |
      | 0x10000 | | Show input file queuing. |
      | 0x20000 | | Show readable runtime debugging. |
      | 0x40000 | | Print input context on execution-time errors. |
      | 0x80000 | |  Show sleeps. |
      | 0x100000 | | Show thread stuff. |
      | 0x200000 | | Show state changes. |
      | 0x400000 | | Use hexadecimal for socket debugging output. |
      | 0x800000 | | Show server/client socket messages. |

      If a debugging log file is open (any file that begins with the characters `dlog` or ends with the characters `.dlog`), debugging messages are only written to that file, not to the screen or any other file or device.
  DISPLAY:
    signature: DISPLAY
    description: |-
      is a user-assignable, string-valued variable.
      Its value at the time an X-Windows graphics filter process is spawned with the `plot_cntl("open")` function (with `GTERM` set to `"x11"`) determines on which host and screen the plot window will be displayed.
      The initial value for `DISPLAY` is taken from the environment variable of the same name.
  EVAL_ERR:
    signature: EVAL_ERR
    description: |-
      is a built-in variable that will be assigned error messages generated by errors from parsing or executing strings passed to the `eval()` or `eval2()` functions.
      See the `eval()` function on page 80, for details.
  EVAL_RESULT:
    signature: EVAL_RESULT
    description: |-
      is a built-in variable with a value set by the `eval()` or `eval2()` functions.
      If `EVAL_RESULT` is −1, there was an error parsing or executing the command string, or an attempt was made to return the value of a single uninitialized variable.
      If `EVAL_RESULT` is 1, the command string was a statement or was a statement list that ended in a statement.
      If `EVAL_RESULT` is zero, the command string or last statement in the string was an expression.
      See the `eval()` function on page 80, for details.
  GETLINE_EOF:
    signature: GETLINE_EOF
    description: |-
      is a built-in variable set by the `getline()` function to distinguish between an end of file, an error or a literal −1 read from the file.
      The value of `GETLINE_EOF` will be 1 if there was an end-of-file condition on the read of the file, −1 if there was an error reading the file or if the file couldn’t be opened and zero if the read was successful.
      See the `getline()` function on page 90.
  GTERM:
    signature: GTERM
    description: |-
      is a user-assignable, string-valued variable containing a value describing the display type to use for high-resolution graphics.
      Its value will be taken from an environment variable of the same name when **spec** starts up, if such a variable exists.
      The only currently supported `GTERM` value is `x11` for X Window System graphics.
      If `GTERM` is not set in the environment or has not been assigned a value, it defaults to `x11`.
      Legacy values of `vga`, `ega`, `herc`, `sun`, etc. are no longer supported.
  HDW_ERR:
    signature: HDW_ERR
    description: |-
      is a user-assignable number-valued variable that can be set before hardware calls to affect how **spec** responds to certain errors.
      After hardware calls, the value of `HDW_ERR` conveys information on any errors encountered.
      By default, certain hardware errors cause **spec** to reset to command level.
      By setting `HDW_ERR` to −1 before a call to user-level hardware access functions, there is no reset, the function returns and `HDW_ERR` contains an error code.

      Functions which set `HDW_ERR` include `counter_par()`, `motor_par()`, `mca_par()`, `ca_get()`, `ca_put()`, `ca_fna()`, `gpib_get()`, `gpib_put()`, `gpib_poll()`, `gpib_cntl()`, `gpib_par()`, `port_get()`, `port_getw()`, `port_put()`, `port_putw()`, `ser_get()`, `ser_put()`, `ser_par()`, `sock_get()`, `sock_put()`, `sock_par()`, `fbus_get()`, `fbus_put()`, `vxi11_get()` and `vxi11_put()`.

      When there is an error in these functions, they usually return −1, or sometimes zero.
      However, such values can also be valid return values.
      If one is doing error checking, one should check `HDW_ERR` after the function call.
      The following table lists the possible values for `HDW_ERR` and what each value indicates:

      1. Generic error
      2. GPIB no listener
      3. Timeout
      4. A non-fatal error
      5. Function called with bad argument
      6. Trying to access unconfigured hardware
      7. Function called with bad address
      8. Lost connection
      9. User abort (**^C**)
      10. Unresponsive hardware
      11. Disabled hardware
      12. Bad parameter
      13. Read only parameter
      14. Write only parameter

      If the value of `HDW_ERR` is −1 before the call to the user-level hardware access function, no reset to command level will take place for any errors.
      Otherwise, traditionally fatal errors will still be fatal.
  ROWS:
    signature: ROWS
    description: |-
      is a number-valued variable set to the number of text rows on the user terminal or workstation window.
      The value is used for formatting text-mode plots and on-line help files.
      `ROWS` is generally automatically assigned a value from the system terminal data base when **spec** starts up, or, if available, by using the `TIOCGWINSZ` command in the *ioctl()* system call whenever a value for `ROWS` is needed.
  S:
    signature: S[]
    description: |-
      is an array that will be filled with the hardware scaler contents when the command `getcounts` is executed.
  TERM:
    signature: TERM
    description: |-
      is a user-assignable, string-valued variable.
      It is initialized to the user’s terminal type as taken from the environment variable *TERM*.
      If not found in the environment, it is set to terminal-type *vt100*.

  ### documented not in spec_manA4.pdf but in CSS spec help pages (https://www.certif.com/spec_help/index.html).

  HDF5_ERROR_MODE:
    signature: HDF5_ERROR_MODE
    comments: 'cited from [CSS spec help pages: hdf5](https://certif.com/spec_help/hdf5.html).'
    description: |-
      Sets the verbosity level of error messages.
      Valid values are 1 through 4.
      Higher levels are useful for debugging calls of the above functions in conjunction with the HDF5 library source code.
      The default value is 1.
  argc:
    signature: argc
    comments: 'cited from [CSS spec help pages: macros](https://www.certif.com/spec_help/macros.html).'
    description: |-
      is a local variable brought into existence within the scope of a macro function.
      The value of the variable `argc` is the number of arguments used to invoke the macro function.

      The additional variables `arg1`, `arg2`, etc., represent the arguments, whether or not the arguments 
      were explicitly declared in the macro definition. 
      The argument number corresponds to the position of the argument, with the first argument being `arg1`.

      (Added in spec release 6.06.11.)
  argv:
    signature: argv[]
    comments: 'cited from [CSS spec help pages: macros](https://www.certif.com/spec_help/macros.html).'
    description: |-
      is a local associative array-like variable brought into existence within the scope of a macro function.
      Elements are numbered starting from "1".
      The `argv[]` symbol is similar to an associative array with the special property that in addition to number and string values, elements can be associative or data arrays to match the arguments by which the macro function was invoked.

      (Added in spec release 6.12.01.)

# Built-In Functions and Commands

functions:

  ## Utility Functions and Commands

  ### System functions

  chdir:
    signature: chdir([directory])
    overloads:
    - signature: chdir()
      description: |-
        Changes **spec**’s current working directory to to the user’s home directory as obtained from the user’s environment variable *HOME*.
        Returns **true** or **false** according to whether the command was successful or not.
        The value of the built-in string variable `CWD` is updated to the current working directory.
    - signature: chdir(directory)
      description: |-
        As above, but changes to the directory `directory`, which must be a string constant or expression.
  unix:
    signature: unix([command[, str[, len]]])
    overloads:
    - signature: unix()
      description: |-
        Spawns an interactive subshell using the program obtained from the user’s environment variable *SHELL* (or *shell*).
        Uses */bin/sh* if the environment variable is not set.
        Returns the integer exit status of the shell.
    - signature: unix(command)
      description: |-
        As above, but uses */bin/sh* to execute the one-line command `command`, which must be a string constant or expression.
        Returns the integer exit status of the command.
        Uses */bin/sh* to execute the one-line command `command`.
        Returns the integer exit status of the command.
    - signature: unix(command, str[, len])
      description: |-
        As above, but the argument `str` is the name of a variable in which to place the string output from the command in the first argument.
        The maximum length of the string is 4096 bytes (including a null byte).
        The optional third argument can be used to specify a larger size.
  time:
    signature: time()
    description: |-
      Returns the current epoch in seconds.
      The UNIX epoch is the number of seconds from January 1, 1970, 00:00:00 GMT.
      The value returned includes a fractional part with microsecond resolution as provided by the host *gettimeofday()* system call.
  date:
    signature: date([<fmt|seconds[, fmt]>])
    overloads:
    - signature: date()
      description: |-
        Returns a string containing the current date as
        `Tue Feb 7 21:02:23 EST 2017`
    - signature: date(fmt)
      description: |-
        As above, but the output string is formatted according to the specifications in the string `fmt`.
        The format is passed to the standard C library *strftime()* function (see the *strftime* man page) with one addition:
        **spec** fills in the format options `%.1` through `%.9` with the fractional seconds, where the single digit specifies the number of decimal digits.
        For example,
        `
        print date("%m-%d-%Y %T.%.6")
        `
        would display
        `
        02-07-2017 21:04:57.927905
        `
    - signature: date(seconds[, fmt])
      description: |-
        As above, but the returned string represents the epoch given by `seconds`.
        See `time()` above.
  getenv:
    signature: getenv(string)
    description: |-
      Returns the value of the environment variable represented by the string `string`.
      If the environment variable is unset, the null string is returned.
      Environment variables are exported to **spec** by the invoking shell program.
  file_info:
    signature: file_info(filename|pid[, cmd])
    overloads:
    - signature: file_info(filename[, cmd])
      description: |-
        Returns information on the file or device named `filename`.
        With a single `filename` argument, `file_info()` returns **true** if the file or device exists.
        If the argument `filename` is the string `"?"`, the possible values for `cmd` are listed.
        If `filename` is the string `"."`, **spec** uses the information from the last *stat()* system call made using the previous argument for `filename`, avoiding the overhead associated with an additional system call.

        Possible values for `cmd` and the information returned follow.
        Note that the first set of commands parallel the contents of the data structure returned by the *stat()* system call, while the second set of commands mimic the arguments to the *test* utility available in the shell.

        - `"dev"` — The device number on which `filename` resides.
        - `"ino"` — The inode number of `filename`.
        - `"mode"` — A number coding the access modes and file attributes.
        - `"nlink"` — The number of hard links for `filename`.
        - `"uid"` — The user id of the owner.
        - `"gid"` — The group id of the owner.
        - `"rdev"` — The device ID if `filename` is a block or character device.
        - `"size"` — The size in bytes of `filename`.
        - `"atime"` — The time when `filename`’s data was last accessed.
        - `"mtime"` — The time when `filenames`’s data was last modified.
        - `"ctime"` — The time when `filenames`’s attributes were last modified.
        - `"isreg"` or `"−f"` — Returns **true** if `filename` is a regular file.
        - `"isdir"` or `"−d"` — Returns **true** if `filename` is a directory.
        - `"ischr"` or `"−c"` — Returns **true** if `filename` is a character device.
        - `"isblk"` or `"−b"` — Returns **true** if `filename` is a block device.
        - `"islnk"` or `"−h"` or `"−L"` — Returns **true** if `filename` is a symbolic link.
        - `"isfifo"` or `"−p"` — Returns **true** if `filename` is a *named pipe* (sometimes called a *fifo*).
        - `"issock"` or `"−S"` — Returns true if `filename` is a socket.
        - `"-e"` — Returns **true** if `filename` exists.
        - `"-s"` — Returns **true** if the size of `filename` is greater than zero.
        - `"-r"` — Returns **true** if `filename` is readable.
        - `"-w"` — Returns **true** if `filename` is writable.
        - `"-x"` — Returns **true** if `filename` is executable.
        - `"-o"` — Returns **true** if `filename` is owned by you.
        - `"-G"` — Returns **true** if `filename` is owned by your group.
        - `"-u"` — Returns **true** if `filename` is setuid mode.
        - `"-g"` — Returns **true** if `filename` is setguid mode.
        - `"-k"` — Returns **true** if `filename` has its sticky bit set.
        - `"lines"` — Returns the number of newline characters in the file. If the file does not end with a newline, the count is increased by one.
    - signature: file_info(pid, "alive")
      description: |-
        Return **true** if the process associated with the process ID `pid` exists.

  ### Miscellaneous

  eval:
    signature: eval(string)
    description: |-
      Parses and executes the string `string`, which can contain one or more statements or statement blocks.
      If the last statement in the string `string` is an expression, its value is returned.
      A single number, a quoted string or a single variable is considered an expression and its value will be returned.
      However, a single uninitialized variable will generate an error.

      If the last statement is not an expression, `eval()` returns **true** (nonzero) if there were no errors executing the statement(s).
      The type of errors that normally cause **spec** to reset to command level (syntax errors, for example) will cause `eval()` to return **false** rather than reset to command level.

      To distinguish between a **true** (1) or **false** (0) return value and an expression returning a value, `eval()` assigns a code to the built-in global variable `EVAL_RESULT` (as of **spec** release 6.04.05).
      If `EVAL_RESULT` is −1, there was an error parsing or executing the string, or an attempt was made to return the value of a single uninitialized variable.
      If `EVAL_RESULT` is 1, the string was a statement or was a statement list that ended in a statement.
      If `EVAL_RESULT` is zero, the string or last statement in the string was an expression.

      An empty string or a string containing only white-space characters is a special case.
      `EVAL_RESULT` is set to 1 to indicate a statement, but the return value of `eval()` is zero.

      If the string `string` contains multiple statements, the value of `EVAL_RESULT` will 0 or 1 based on the result of the last statement.
      If any of the statements generate an error, `EVAL_RESULT` will be set to −1 and the parsing and execution of the statements in the string `string` is abandoned.

      If there is an error parsing or executing the string, in most cases, an error message will be assigned to the built-in global variable `EVAL_ERR` (as of **spec** release 6.04.05).

      `EVAL_RESULT` and `EVAL_ERR` are reset to 0 and "" respectively on each call of `eval()`.
      With nested calls to `eval()`, `EVAL_RESULT` and `EVAL_ERR` will be associated with the most recently completed call.

      Note, local symbols defined in the statement block in which `eval()` is used are not visible to the statements in the string `string`.
      Use `eval2()`, below, to access such symbols.
  eval2:
    signature: eval2(string)
    description: |-
      Similar to `eval()`, but local symbols in the statement blocks surrounding the `eval2()` function call are visible and can be read or modified.
      To use local variables within the `eval2()` string that won’t be associated with local variables of the same name outside the `eval2()` call, use curly brackets to enclose the statements with the `local` declaration within the string `string`.
  sleep:
    signature: sleep(t)
    description: |-
      Suspends execution for a minimum of `t` seconds, where `t` may be non-integral.
      Actual sleep times may vary depending on other activity on the system and the resolution of the system clock.
      Returns **true**.
      Can be interrupted with **^C**.
  gethelp:
    signature: gethelp(topic[, flags])
    description: |-
      Displays the help file `topic` on the screen.
      If `topic` contains a `/`, the argument is treated as an absolute or relative pathname.
      Otherwise, the argument refers to a file in the *spec_help* (or *help*) subdirectory of the `SPECD` directory.
      Returns non-zero if the file couldn’t be opened.

      The `SPECD`/*spec_help*/*.links* contains a list of alternative help files names and topics.
      If an entry matching topic is listed in *.links*, the corresponding file will be displayed.

      Prior to **spec** release 6, **spec** contained an internal help file parser and formatter.
      With release 6, help files are formatted using the standard *groff* utility and paginated using the standard *less* utility.

      If the argument `topic` is a pathname and the optional `flags` argument has bit 0x02 set, **spec** will use *groff* formatting macros appropriate for help files written using pre-release 6 conventions.

      Current **spec** help files are written in the format called *reStructuredText*.
      The *.rst* files are included in the *help* subdirectory of the **spec** distribution.
      The **spec** distribution also includes versions of the help files converted to *groff* format and versions preformatted for pagination for a screen width of 80 columns.
      It is these files that are copied to the directories `SPECD`/*spec_help*/*help_man* and `SPECD`/*spec_help*/*help_pre*, respectively.
      The preformatted files are displayed if the current screen width is between 80 and 92 columns or if the *groff* utility is unavailable.
      Otherwise the *groff* files are processed and displayed to fit the current screen width.
      The `gethelp()` function will also create commands to process *.rst* files and pass them through *groff* and the paginator, but only if *Python* and the *Python docutils* package are installed.

      The paths and options for the system tools used by **spec**’s help facility are configured in the file `SPECD`/*spec.conf*.
  whatis:
    signature: whatis(string[, 1])
    overloads:
    - signature: whatis(string)
      description: |-
        Returns a number that encodes what the identifier in `string` represents.
        The return value is a two-word (32-bit) integer, with the low word containing a code for the type of object and the high word containing more information for certain objects.

        | High Word | Low Word | Meaning |
        | ---: | ---: | :--- |
        | 0 | 0 | Not a command, macro or keyword. |
        | 0 | 1 | Command or keyword. |
        | *length* | 2 | Macro (*length* is in bytes). |
        | 0x0001 | 4 | A data array or data array element. |
        | 0x0010 | 4 | Number-valued symbol. |
        | 0x0020 | 4 | String-valued symbol. |
        | 0x0040 | 4 | Constant-valued symbol. |
        | 0x0100 | 4 | Associative array name. |
        | 0x0200 | 4 | Built-in symbol. |
        | 0x0400 | 4 | Global symbol. |
        | 0x0800 | 4 | Unset symbol. |
        | 0x2000 | 4 | Immutable symbol. |
        | 0x4000 | 4 | Local symbol. |
        | 0x8000 | 4 | Associative array element. |

        Most type-4 symbols have more than one of the high-word bits set.

        The following two macros uses the `whatis()` function.
        The first determines whether or not a symbol has been given a value by looking at the unset bit.
        The second checks whether or not a symbol is the name of a macro.

        ```
        10.FOURC> def unset(x) '{ return(whatis(x)&0x8000000? 1:0) }'
        11.FOURC> def is_macro(x) '{ return(whatis(x)&2? 1:0) }'
        12.FOURC>
        ```
    - signature: whatis(string, 1)
      description: |-
        With two arguments, returns a printable string explaining in words what kind of thing the thing named in `string` is to **spec**.
  spec_par:
    signature: spec_par(par[, value])
    description: |-
      Sets internal parameters.
      Typing `spec_par("?")` lists the available parameters, their current value and the default value, if different.
      The command `spec_par("set_defaults?")` sets all parameters to their default values.
      The currently available parameters are:
      
      - `"auto_file_close"`
      - `"auto_hdw_poll"`
      - `"check_file_names"`
      - `"confirm_quit"`
      - `"elog_timestamp"`
      - `"epics_timeout"`
      - `"flush_interval"`
      - `"HKL_rounding"`
      - `"hdw_poll_interval"`
      - `"history_join"`
      - `"history_size"`
      - `"keep_going"`
      - `"legacy_limit_check"`
      - `"modify_step_size"`
      - `"old_shared"`
      - `"parse_units"`
      - `"show_prdef_files"`
      - `"specwiz"`
      - `"use_sem_undo"`
      - `"warn_not_at_pos"`

      ( **description of list items not shown** )
  calc:
    signature: calc(i[, x])
    overloads:
    - signature: calc(i)
      description: |-
        Calls a user-added function having code `i`.
        Codes are assigned in the distribution source file *u_hook.c*.
        Returns a user-supplied value or zero if there is no user-supplied value.
    - signature: calc(i, x)
      description: |-
        As above, but passes the argument `x` to the user-supplied function.
        The geometry calculations that transform motor positions to reciprocal space coordinates and vice versa are implemented using calls to `calc()`.
        A description of the particular calls implemented for the four-circle diffractometer are in the *Four-Circle Reference*.
        See page 225 in the *Administrator’s Guide* for information on how to include other user-added functions in the program.
  open:
    signature: open([filename])
    overloads:
    - signature: open()
      description: |-
        Lists all open files, including their directories, and indicates which files are currently turned on for output.
        Returns zero.
    - signature: open(filename)
      description: |-
        Makes `filename`, which is a string constant or expression, available for output.
        Files are opened to append.
        Returns zero for success, −1 if the file can not be opened or if there are too many open files.
        If the `spec_par() "check_file_name"` option is on, and if `filename` contains any of the characters ``()[]{}|$`'*?;!&<>"``, **spec** will print an error message and the function will return an error, unless the file already exists.
  close:
    signature: close(filename)
    description: |-
      Closes `filename` and removes it from the table of files available for output.
      Returns zero for success, −1 if the file wasn’t open.
      Files should be closed before modifying them with editors.
  on:
    signature: on([filename])
    overloads:
    - signature: on()
      description: |-
        Lists all open files and indicates which ones are currently turned on for output.
    - signature: on(filename)
      description: |-
        Turns on `filename` for output.
        All messages, except for some error and debugging messages, but including all `print` and `printf()` output, are sent to all turned-on devices.
        If `filename` has not been made available for output with the `open()` function, it will be opened.
        Returns zero for success, −1 if the file can’t be opened or if there are too many open files.
  off:
    signature: off(filename)
    description: |-
      Turns off output to `filename`, but keeps it in the list of files available for output.
      If this was the last turned-on file or device, `tty` is turned back on automatically.
      Returns zero for success, −1 if the file wasn’t open.
  queue:
    signature: queue(cmd[, option])
    comments: 'cited from [CSS spec help pages: queue](https://www.certif.com/spec_help/queue.html).'
    description: |-
      Schedules commands to be run once at a fixed time in the future or to repeat at an interval.
      Commands from the queue will normally run while **spec** is waiting for keyboard input.
      If **spec** is otherwise occupied commands in the queue will be deferred until the next opportunity **spec** has to check the queue.
      However, a `queue("check")` can be issued within running statements to give commands that are due a chance to run.

      (Added in spec release 6.11.03.)
    overloads:
    - signature: queue(cmd, interval)
      description: |-
        Schedules `cmd` to be run every interval seconds.
    - signature: queue(cmd, epoch_time*)
      description: |-
        Schedules `cmd` to be run just once at `epoch_time`. The epoch time is the number of seconds from the UNIX epoch of 00:00 GMT 1/1/1970.
    - signature: queue("list")
      description: |-
        Lists commands in the queue, sorted by next run time, along with the configured repetition interval.
    - signature: queue("check")
      description: |-
        Runs commands that are due or overdue.
    - signature: queue(cmd, "delete")
      description: |-
        Deletes `cmd` from the queue.
        The argument `cmd` may contain the `*`, `?` and `[]` metacharacters.
        A `*` matches any string, while a `?` matches any single character.
        With the `[...]` pattern, any string that contains the characters within the square brackets is matched.
        Two characters separated by a hyphen specify a range of characters that will match.
        An initial `^` negates the enclosed character set.

  ### Reading From Files

  getline:
    signature: getline(file[, arg])
    description: |-
      This function reads successive lines from the ASCII file `file` each time it is called and returns the string so obtained, including the trailing newline.
      If `arg` is the string `"open"`, the function returns zero if the file can opened for reading.
      Otherwise −1 is returned.
      If `arg` is `"close"`, the file is closed and zero is returned.
      If `arg` is zero, the first line of the file is returned.
      If only the first argument is present, the next line of the file is read and returned.
      At the end of the file, a −1 is returned.

      The previous file, if any, is closed and the new file is opened automatically when the filename argument changes.

      To distinguish between an end of file, an error or a literal −1, `getline()` assigns a value to a built-in variable named `GETLINE_EOF` (as of **spec** release 6.03.05).
      The value of `GETLINE_EOF` will be 1 if there was an end-of-file condition on the read of the file, −1 if there was an error reading the file or if the file couldn’t be opened and zero if the read was successful.
  dofile:
    signature: dofile(file[, line_num|search_pattern])
    description: |-
      Queues the file `file` for reading commands.
      `file` must be a string constant or expression.
      Returns nonzero if the file doesn’t exist or permit read access.
      An optional second argument can specify a line number or a text pattern that will be used to locate the point in the file to begin reading.
      If the argument is an integer, the number specifies at which line to start reading the file.
      (Currently, only positive integers are allowed.)
      If the argument is anything else, it is considered a search string, and text is read from the file starting at the first line containing that search string.
      The metacharacters `*`, which matches any string, and `?`, which matches any single character, are allowed in the search string.
      Initial and trailing white space is ignored in the file.
  qdofile:
    signature: qdofile(file)
    description: |-
      As above, but does not show the contents of the file on the screen as the file is read.

  ### Keyboard Input

  input:
    signature: input([<prompt|n>])
    overloads:
    - signature: input()
      description: |-
        Reads a line of input from the keyboard.
        Leading white space and the trailing newline are removed and the string is returned.
        Returns the null string "" if only white space was entered. Example:
        
        ```
        13.FOURC> def change_it '{
        14.quot> local it
        15.quot> printf("Change it? ");
        16.quot> if ((it=input()) != "")
        17.quot>       change_mac(it)
        18.quot> }'
        19.FOURC>
        ```
    - signature: input(prompt)
      description: |-
        As above, but prompts with the string `prompt`.
        Examples:

        ```
        19.FOURC> input("Hit return when ready ... ")
        Hit return when ready ... <return>
        20.FOURC>
        ```
    - signature: input(n)
      description: |-
        This function behaves differently depending on whether the input source is the keyboard or a pipe from another program (where **spec** is invoked with the `−p` *fd pid* option, with nonzero *fd*.)
        In the usual case, if `n` is less than or equal to zero, the tty state is set to “cbreak” mode and input echo is turned off.
        Then `input()` checks to see if the user has typed a character and immediately returns a null string if nothing has been typed.
        Otherwise, it returns a string containing the single (or first) character the user typed.
        If `n` is less than zero, the cbreak, no-echo mode remains in effect when `input()` returns.
        If `n` is greater than zero, the normal tty state is restored (as it is also if there is an error, if the user types **^C** or if the user enters the exit command).
        Also, no characters are read and the null string is returned.
        The normal state is also restored before the next main prompt is issued, whether due to an error, a **^C**, or through the normal flow of the program.

        On the other hand, when **spec** is invoked with the `−p` *fd pid* option, with nonzero *fd*, `input()` reads nothing but does return the number of characters available to be read.
        If `n` is nonzero, `input()` simply reads and returns a line of text, as if it had been invoked with no argument.
  yesno:
    signature: yesno([prompt, ]val)
    overloads:
    - signature: yesno(val)
      description: |-
        Reads a line of input from the keyboard.
        The function returns 1 if the user answers with a string beginning with `Y`, `y` or `1`.
        The value of `val` is returned if the user simply enters return.
        Otherwise the function returns zero.
    - signature: yesno(prompt, val)
      description: |-
        As above, but prompts the user with the string `prompt`.
        The characters `" (YES)? "` are appended to the prompt string if `val` is nonzero.
        Otherwise the characters `" (NO)? "` are added.
  getval:
    signature: getval([prompt, ]val)
    overloads:
    - signature: getval(val)
      description: |-
        Reads a line of input from the keyboard.
        If the user enters a value, that value is returned.
        The value of `val` is returned if the user simply enters return.
        The function works with both number and string values.
    - signature: getval(prompt, val)
      description: |-
        As above, but prompts the user with the string `prompt`.
        The string is printed followed by the current value of `val` in parenthesis, a question mark and a space.
        For example,

        ```
        20.FOURC> DATAFILE = getval("Data file", DATAFILE)
        Data file (pt100.133)? <return>
        21.FOURC>
        ```
  getsval:
    signature: getsval(prompt, val)
    description: |-
      Like `getval()` above, prompts the user with the string `prompt`, if present, then waits for a user response.
      The value of `val` is returned if the user simply enters return.
      If the prompt string `prompt` is present, the string is printed followed by the current value of `val` in parenthesis, a question mark and a space.
      Unlike `getval()`, this function does not convert hexadecimal or octal input (number strings that begin with 0, 0x or 0X) to the corresponding decimal value.
      Rather, the `getsval()` function returns the literal string as entered.

  ### Text Output
  
  printf:
    signature: printf(format[, a...])
    description: |-
      Does formatted printing on the turned-on output devices.
      `format` contains the format specifications for any following arguments.
      See the description of *printf()* in any C-language manual.
      Returns **true**.
  eprintf:
    signature: eprintf(format[, a...])
    description: |-
      As above, except that if an error-log file is open, the generated string will also be written to that file prefixed by the `#E` characters.
  fprintf:
    signature: fprintf(file_name, format[, a...])
    description: |-
      Does formatted printing on `file_name`.
      All other devices (except *log* files) are turned off while the string is printed.
      The specified file is opened, if necessary, and remains open until closed with the `close()` function.
  tty_cntl:
    signature: tty_cntl(cmd)
    description: |-
      Sends terminal-specific escape sequences to the display.
      The sequences are only written to the `"tty"` device and only if it is turned on for output.
      The sequences are obtained from the system terminal-capability data base using the value of the environmental variable `TERM`.
      The following values for `cmd` are recognized:

      - `"ho"` — Move the cursor to the home position (upper left corner).
      - `"cl"` — Clear the screen.
      - `"ce"` — Clear to the end of the line.
      - `"cd"` — Clear from current position to the end of the screen.
      - `"so"` — Start text stand-out mode.
      - `"se"` — End text stand-out mode.
      - `"md"` — Start bold (intensified) mode.
      - `"me"` — End bold mode.
      - `"us"` — Start underline mode.
      - `"ue"` — End underline mode.
      - `"mb"` — Start blink mode. (Note, xterms don’t blink.)
      - `"mh"` — Start half-bright mode.
      - `"mr"` — Start reverse video mode.
      - `"up"` — Move cursor up one line.
      - `"do"` — Move cursor down one line.
      - `"le"` — Move cursor left one space.
      - `"nd"` — Move cursor right one space (nondestructive).
      - `"resized?"` — A special option that updates the `ROWS` and `COLS` variables in the event the window size has changed and returns a nonzero value if the window size has changed since the last call to `tty_cntl("resized?")`.

      Returns **true** if `cmd` is recognized, otherwise returns **false**.
  tty_move:
    signature: tty_move(x, y[, string])
    description: |-
      Moves the cursor to column `x` and row `y` of the display, where column 0, row 0 is the upper left corner of the screen.
      If the third argument `string` is present, it is written as a label at the given position.
      The sequences and string are only written to the `"tty"` device and only if it is turned on for output.
      Special tty control sequences of the form `\[xx]`, where `xx` is one of the codes listed for the `tty_cntl()` function above, can be used with `string`.
      Negative `x` or `y` position the cursor relative to the right or bottom edges of the screen, respectively.
      Relative moves are possible by adding ±1000 to `x` or `y` position arguments.
      Both coordinates must specify either relative or absolute moves.
      If one coordinate specifies a relative move, the absolute move in the other coordinate will be ignored.
      Please note, not all terminal types support relative moves.
      Returns **true**.
  tty_fmt:
    signature: tty_fmt(x, y, wid, string)
    description: |-
      Writes the string `string` to the screen starting at column `x` and row `y`, where column 0, row 0 is the upper left corner of the screen.
      The string is only written to the `"tty"` device and only if it is turned on for output.
      If `string` is longer than the width given by `wid`, the string is split at space characters such that no line is longer then `wid`.
      Newlines in the string are retained, however.
      The function will truncate words that are wider than `wid` and drop lines that would go off the bottom of the screen.
      Special tty control sequences of the form `\[xx]`, where `xx` is one of the codes listed for the `tty_cntl()` function above, can be used with `string`.
      Negative `x` or `y` position the cursor relative to the right or bottom edges of the screen, respectively.
      The function returns the number of lines written.
  spec_menu:
    signature: spec_menu(menu[, modes[, dumbterm]])
    description: |-
      Creates an interactive menu from specifications in the associative array `menu`.
      The menu can be used for configuring macros and other **spec** options.
      The standard **spec** macros `setplot`, `setshow`, `mstartup` and `plotselect` all use the `spec_menu()` function.
      When the menu is active, the user can use arrow and control keys to navigate the options and edit strings.
      While waiting for input in `spec_menu()`, **spec** will continue to poll hardware and respond to client commands if in server mode, (just as **spec** does while waiting for input at the main command prompt).

      ( **paragraphs below not shown** )

  ## Macros

  ### Built-In Commands

  cdef:
    signature: cdef(<name, string[, key[, flags]]|"?">)
    overloads:
    - signature: cdef(name, string[, key[, flags]])
      description: |-
        Defines parts of *chained* macros.
        A chained macro definition is maintained in pieces that can be selectively included to form the complete macro definition.
        The argument `name` is the name of the macro.
        The argument `string` contains a piece to add to the macro.

        The chained macro can have three parts: a beginning, a middle and an end.
        Pieces included in each of the parts of the macros are sorted lexicographically by the keys when putting together the macro definition.
        Pieces without a key are placed in the middle in the order in which they were added, but after any middle pieces that include a key.
        
        The `key` argument allows a piece to be selectively replaced or deleted, and also controls the order in which the piece is placed into the macro definition.
        The `flags` argument controls whether the pieces are added to the beginning or to the end of the macro, and also whether the pieces should be selectively included in the definition depending on whether `key` is the mnemonic of a configured motor or counter.
        
        The bit meanings for flags are as follows:

        - 0x01 − only include if key is a motor mnemonic
        - 0x02 − only include if key is a counter mnemonic
        - 0x10 − place in the beginning part of the macro
        - 0x20 − place in the end part of the macro
        
        If `flag` is the string `"delete"`, the piece associated with `key` is deleted from the named macro, or if `name` is the null string, from all the chained macros.
        If `key` is the null string, the `flags` have no effect.

        If `flags` is the string `"enable"`, the parts of the named macro associated with `key` are enabled, and if `flags` is the string `"disable"`, the associated parts are disabled.
        If `name` is the null string `""`, then all chained macros that have parts associated with key will have those parts enabled or disabled.

        If `key` is the null string, the `flags` have no effect.

        The `cdef()` function will remove any existing macro defined using `def` or `rdef`.
        However, the commands `lsdef`, `prdef` and `undef` will function with chained macros.
        When **spec** starts and when the `reconfig` command is run (or the `config` macro is invoked), all the chained macros are adjusted for the currently configured motors and counters.
    - signature: cdef("?")
      description: |-
        Lists all the pieces of all the chained macros.
    - signature: cdef(name, "", "?")
      description: |-
        Lists the pieces of the macro named `name`.
  clone:
    signature: clone(destination, source)
    description: |-
      Duplicates the macro `source` as a new macro named `destination`.
      A clone of a chained macro becomes an ordinary macro.
  strdef:
    signature: strdef(name[, <arr|key[, arr]>])
    overloads:
    - signature: strdef(name[, arr])
      description: |-
        Returns a string containing the macro definition of `name`.
        If `name` is not a defined macro, returns the string `name` itself.
        If an associative array `arr` is included as an argument and if the macro `name` is a macro function, elements of `arr` indexed starting at 0 will be assigned the string names of the arguments to the macro function.
        The element `arr["file"]` will be assigned the name of file where the macro was defined or `"tty"` if the macro was defined at the keyboard.
    - signature: strdef(name, key[, arr])
      description: |-
        If `name` is a chained macro, returns a string containing only the definition segment associated with `key`.
        If `name` is not a defined macro, returns the string `name` itself.
        If `name` is a macro, but not a chained macro, returns the definition.
        If `name` is a chained macro, but doesn’t contain a segment associated with `key`, returns the null string.
        If an associative array `arr` is included as an argument and if the macro `name` is a macro function, elements of `arr` indexed starting at 0 will be assigned the string names of the arguments to the macro function.
        The element `arr["file"]` will be assigned the name of file where the macro was defined or `"tty"` if the macro was defined at the keyboard.

  ## String and Number Functions

  ### Math Functions

  exp:
    signature: exp(x)
    description: |-
      Returns e^`x`.
  exp10:
    signature: exp10(x)
    description: |-
      Returns 10^`x`.
  log:
    signature: log(x)
    description: |-
      Returns the natural logarithm of `x`.
  log10:
    signature: log10(x)
    description: |-
      Returns the base 10 logarithm of `x`.
  sqrt:
    signature: sqrt(x)
    description: |-
      Returns the square root of `x`.
  pow:
    signature: pow(x, y)
    description: |-
      Returns `x`^`y`.
  fabs:
    signature: fabs(x)
    description: |-
      Returns the absolute value of `x`.
  int:
    signature: int(x)
    description: |-
      Returns the integer part of `x`.
      The integer part is formed by truncation towards zero.
  rand:
    signature: rand([x])
    overloads:
    - signature: rand()
      description: |-
        Returns a random integer between 0 and 32767.
    - signature: rand(x)
      description: |-
        If `x` is positive, returns a random integer between 0 and `x`, inclusive.
        If `x` is negative, returns a random integer between −`x` and `x`, inclusive.
        Values of `x` greater than 32767 or less than −16383 are set to those limits.
        If `x` is zero, zero is returned.
        The C-library *rand()* function is used to obtain the values.
        The seed is set to the time of day on the first call.
        The randomness (or lack thereof) of the numbers obtained is due to the C library implementation.
  srand:
    signature: srand(seed)
    description: |-
      Sets the seed value for the random number generator used by the `rand()` function to the integer value `seed`.
      This function allows the same sequence of random numbers to be generated reproducibly by resetting the seed to the same value.
  sin:
    signature: sin(x)
    description: |-
      Returns the sine of the argument `x`, which must be in radians.
  cos:
    signature: cos(x)
    description: |-
      Returns the cosine of the argument `x`, which must be in radians.
  tan:
    signature: tan(x)
    description: |-
      Returns the tangent of the argument `x`, which must be in radians.
  asin:
    signature: asin(x)
    description: |-
      Returns the arc sine of the argument `x`.
      The return value is in radians in the range −π /2 to π /2.
  acos:
    signature: acos(x)
    description: |-
      Returns the arc cosine of the argument `x`.
      The return value is in radians in the range 0 to π.
  atan:
    signature: atan(x)
    description: |-
      Returns the arc tangent of the argument `x`.
      The return value is in radians in the range −π /2 to π /2.
  atan2:
    signature: atan2(y, x)
    description: |-
      Returns the arc tangent of `y`/`x` using the signs of the arguments to determine the quadrant of the return value.
      The return value is in the range −π to π.
      Having both `y` and `x` zero is an error.

  ### String Functions

  index:
    signature: index(s1, s2)
    description: |-
      Returns an integer indicating the position of the first occurrence of string `s2` in string `s1`, counted from 1, or zero if `s1` does not contain `s2`.
  split:
    signature: split(string, arr[, delimiter])
    overloads:
    - signature: split(string, arr)
      description: |-
        Splits the string `string` at space characters and assigns the resulting substrings to successive elements of the associative array `arr`, starting with element 0.
        The space characters are eliminated.
        The functions returns the number of elements assigned.
    - signature: split(string, arr, delimiter)
      description: |-
        As above, but splits the string into elements that are delimited by the string `delimiter`.
        The delimiting characters are eliminated.
  substr:
    signature: substr(string, m[, n])
    overloads:
    - signature: substr(string, m)
      description: |-
        Returns the portion of string `string` that begins at position `m`, counted from 1.
    - signature: substr(string, m, n)
      description: |-
        As above, but the returned string is no longer than `n`.
  length:
    signature: length(string)
    description: |-
      Returns the length of the string `string`.
  sprintf:
    signature: sprintf(format[, a...])
    description: |-
      Returns a string containing the formatted print.
      See *sprintf()* in a C-language reference manual.
  sscanf:
    signature: sscanf(string, format, a[, b...])
    description: |-
      Scans the literal string or string variable *string* for data, where *format* contains a format specification in the same style as the C language *scanf()* function.
      Each subsequent argument is a variable name or array element that will be assigned the values scanned for.
      The function returns the number of items found in the string.
  tolower:
    signature: tolower(s[, count[, start]])
    comments: 'cited from [CSS spec help pages: funcs](https://www.certif.com/spec_help/funcs.html).'
    description: |-
      Returns a string with upper case letters converted to lower case.
      If `count` is specified, only that many characters are converted.
      If `start` is specified, the conversion starts at that position, counted starting from 1.
      Returns the original string if no conversions are possible.

      (Added in **spec** release 6.08.05.)
    overloads:
    - signature: tolower(s)
    - signature: tolower(s, count)
    - signature: tolower(s, count, start)
  toupper:
    signature: toupper(s[, count[, start]])
    comments: 'cited from [CSS spec help pages: funcs](https://www.certif.com/spec_help/funcs.html).'
    description: |-
      Returns a string with lower case letters converted to upper case.
      If `count` is specified, only that many characters are converted.
      If `start` is specified, the conversion starts at that position, counted starting from 1.
      Returns the original string if no conversions are possible.

      (Added in **spec** release 6.08.05.)
    overloads:
    - signature: toupper(s)
    - signature: toupper(s, count)
    - signature: toupper(s, count, start)


  ### Regular Expression Functions

  rsplit:
    signature: rsplit(str, arr, regex)
    description: |-
      Similar to `split()`, but the optional delimiter argument can be a regular expression.
      The string `str` is split into elements that are delimited by the regular expression `regex` and the resulting substrings are assigned to successive elements of the array `arr`, starting with element 0.
      The delimiting characters are eliminated.
      Returns the number of elements assigned.
  sub:
    signature: sub(regex, sub, str)
    description: |-
      Replaces the first instance of the regular expression `regex` in the source string `str` with the substitute string `sub`.
      An `&` in the substitute string is replaced with the text that was matched by the regular expression.
      A `\&` (which must be typed as `"\\&"`) will produce a literal `&`.
      Returns the modified string.
  gsub:
    signature: gsub(regex, sub, str)
    description: |-
      Replaces all instances of the regular expression `regex` in the source string `str` with the substitute string `sub`.
      An `&` in the substitute string is replaced with the text that was matched by the regular expression.
      A `\&` (which must be typed as `"\\&"`) will produce a literal `&`.
      Returns the modified string.
  gensub:
    signature: gensub(regex, sub, which, str)
    description: |-
      Replaces instances of the regular expression `regex` in the source string `str` with the substitute string `sub` based on the value of `which`.
      If `which` is a string beginning with `G` or `g` (for global), all instances that match are replaced.
      Otherwise, `which` is a positive integer that indicates which match to replace.
      For example, a 2 means replace the second match.

      In addition, the substitute text may contain the sequences `\N` (which must be typed as `"\\N"` ), where `N` is a digit from 0 to 9.
      That sequence will be replaced with the text that matches the *N*th parenthesized subexpression in `regex`.
      A `\0` is replaced with the text that matches the entire regular expression.
      Returns the modified string.
  match:
    signature: match(str, regex[, arr])
    description: |-
      Returns the position in the source string `str` that matches the regular expression `regex`.
      The first position is 1.
      Returns 0 if there is no match or −1 if the regular expression is invalid.
      If the associative array `arr` is provided, its contents are cleared and new elements are assigned based on the consecutive matching parenthesized subexpressions in `regex`.
      The zeroth element, `arr[0]`, is assigned the entire matching text, while `arr[0]["start"]` is assigned the starting position of the match and `arr[0]["length"]` is assigned the length of the match.
      Elements from 1 onward are assigned matches, positions and lengths of the corresponding matching parenthesized subexpressions in `regex`.

  ### Conversion Functions

  asc:
    signature: asc(s[, position])
    overloads:
    - signature: asc(s)
      description: |-
        Returns the ASCII value of the first character of the string value of the argument `s`.
    - signature: asc(s, position)
      description: |-
        Returns the ASCII value of the character at position in string `s`, counted from 1.
        If `position` isn't within the string, returns 0. (Available in **spec** release 6.08.05.)
  bcd:
    signature: bcd(x)
    description: |-
      Returns a 24-bit integer that is the binary-coded decimal representation of the nonnegative integer `x`.
  dcb:
    signature: dcb(x)
    description: |-
      Returns the nonnegative integer corresponding to the 24-bit binary-coded decimal representation `x`.
  deg:
    signature: deg(x)
    description: |-
      Returns the argument converted from radians to degrees.
  rad:
    signature: rad(x)
    description: |-
      Returns the argument converted from degrees to radians.

  ## Data Handling and Plotting Functions

  array_op:
    signature: array_op(cmd, arr[, args...])
    description: |-
      Performs operations on the array based on the values for `cmd`:
      
      - `"fill"` — Fills the array `arr` with values. For a two-dimensional array, `array_op("fill", arr, u, v)` produces for each element `arr[i][j] = u × i + v × j` With subarrays, `i` and `j` refer to the subarray index. Also, `i` and `j` always increase, even for reversed subarrays, so `array_op("fill", arr[-1:0][-1:0], 1, 1)` fills arr in reverse order.
      - `"contract"` — For `args` `u` and `v`, returns a new array with dimensions contracted by a factor of `u` in rows and `v` in columns. Elements of the new array are formed by averaging every `u` elements of each row with every `v` elements of each column. If there are leftover rows or columns, they are averaged also.
      - `"min"` or `"gmin"` — Returns the minimum value contained in the array.
      - `"max"` or `"gmax"` — Returns the maximum value contained in the array.
      - `"i_at_min"` or `"i_at_gmin"` — Returns the *index* number of the minimum value of the array. For a two-dimensional array dimensioned as `D[N][M]`, the *index* number of element `D[i][j]` is `(i × M) + j`. If `arr` is a subarray, the index is with respect to the full array, although the minimum is the minimum value in the specified subarray.
      - `"i_at_max"` or `"i_at_gmax"` — Returns the *index* number of the maximum value of the array. See `"i_at_min"` for subarray considerations.
      - `"row_at_min"` or `"rmin"` — Returns the row number containing the minimum value of the array. If `arr` is a subarray, the row is with respect to the full array, although the minimum is the minimum value in the specified subarray.
      - `"row_at_max"` or `"rmax"` — Returns the row number containing the maximum value of the array. If `arr` is a subarray, the row is with respect to the full array, although the maximum is the maximum value in the specified subarray.
      - `"col_at_min"` or `"cmin"` — Returns the column number containing the minimum value of the array. If `arr` is a subarray, the column is with respect to the full array, although the minimum is the minimum value in the specified subarray.
      - `"col_at_max"` or `"cmax"` — Returns the column number containing the maximum value of the array. If `arr` is a subarray, the column is with respect to the full array, although the maximum is the maximum value in the specified subarray.
      - `"i_<=_value"` — Returns the *index* number of the nearest element of the array with a value at or less than `u`. For a two-dimensional array dimensioned as `D[N][M]`, the index number of element `D[i][j]` is `(i × M) + j`. Unlike `"i_at_min"`, `"i_at_max"`, etc., if `arr` is a subarray, the index is with respect to the subarray.
      - `"i_>=_value"` — Returns the *index* number of the nearest element of the array with a value at or greater than `u`, starting from the last element. For a two-dimensional array dimensioned as `D[N][M]`, the index number of element `D[i][j]` is `(i × M) + j`. Unlike `"i_at_min"`, `"i_at_max"`, etc., if `arr` is a subarray, the index is with respect to the subarray.
      - `"fwhm"` — Requires two array arguments, each representing a single row or single column. Returns the full-width in the first array at half the maximum value of the second array.
      - `"cfwhm"` — Requires two array arguments, each representing a single row or single column. Returns the center of the full-width in the first array at half the maximum value of the second array.
      - `"uhmx"` — Requires two array arguments, each representing a single row or single column. Returns the value in the first array corresponding to half the maximum value in the second array and at a higher index.
      - `"lhmx"` — Requires two array arguments, each representing a single row or single column. Returns the value in the first array corresponding to half the maximum value in the second array and at a lower index.
      - `"com"` — Requires two array arguments, each representing a single row or single column. Returns the center of mass in the first array with respect to the second array. The value is the sum of the products of each element of the first array and the corresponding element of the second array, divided by the number of points.
      - `"x_at_min"` — Requires two array arguments, each representing a single row or single column. Returns the element in the first array that corresponds to the minimum value in the second array.
      - `"x_at_max"` — Requires two array arguments, each representing a single row or single column. Returns the element in the first array that corresponds to the maximum value in the second array.
      - `"sum"` or `"gsum"` — Returns the sum of the elements of the array. If there is a third argument greater than zero, the array is considered as a sequence of frames, with the third argument the number of rows in each frame. The return value is a new array with that number of rows and the same number of columns as the original array. Each element of the returned array is the sum of the corresponding elements of each frame. For example, if the original array is dimensioned as `data[N][M]`, the return value for `arr = array_op("sum", data, R)` is a new array of dimension `arr[N/R][M]`, where each element `arr[i][j]` is the sum of `k` from `0` to `R - 1` of `data[i + k × N / R][j]`.
      - `"sumsq"` — Returns the sum of the squares of the elements of the array. If there is a third argument and it is greater than zero, the interpretation is the same as above for `"sum"`, except the elements in the returned array are sums of squares of the elements in the original array.
      - `"transpose"` — Returns a new array of the same type with the rows and columns switched.
      - `"updated?"` — Returns nonzero if the data in the array has been accessed for writing since the last check, otherwise returns zero.
      - `"rows"` — Returns the number of rows in the array.
      - `"cols"` — Returns the number of columns in the array.
      - `"row_wise"` — With a nonzero third argument, forces the `array_dump()`, `array_fit()`, `array_pipe()`, `array_plot()` and `array_read()` functions to treat the array as row-wise, meaning each row corresponds to a data point. With only two arguments, returns nonzero if the array is already set to row-wise mode.
      - `"col_wise"` — As above, but sets or indicates the column-wise sense of the array.
      - `"sort"` — Returns an ascending sort of the array.
      - `"swap"` — Swaps the bytes of the named array. The command can change big-endian short- or long-integer data to little-endian and vice versa. For most built-in data collection, **spec** automatically swaps bytes as appropriate, but this function is available for other cases that may come up.
      - `"frame_size"` — The number of rows in a frame. The frame size is part of the shared array header and may be useful to auxiliary programs, although the value is maintained for non-shared arrays. Note, setting the frame size to zero will clear the `"frames"` tag. Setting the frame size to a non-zero value will set the `"frames"` tag.
      - `"latest_frame"` — The most recently updated frame. The latest frame is part of the shared array header and may be useful to auxiliary programs, although the value is maintained for non-shared arrays.
      - `"tag"`  — Shared arrays can be tagged with a type that will be available to other processes accessing the array. Usage is `array_op("tag", arr, arg)` where `arr` is the array and arg is `"mca"`, `"image"`, `"frames"`, `"scan"` or `"info"`.
      - `"untag"` — Removes tag information.
      - `"info"` — Returns or sets the *info* field of a shared array segment. The field can be contain up to 512 bytes of arbitrary text. When setting the field, if the string argument is longer than 512 bytes, the first 512 bytes will be copied. The function returns the number of bytes copied, −1 if `arr` is not a shared array or 0 if `arr` is a shared array that doesn’t support the *info* field. The *info* field is included in `SHM_VERSION` version 6 headers, added in **spec** release 6.00.08.
      - `"meta"` — Returns or sets the meta area of a shared array segment. With **spec**, the field can contain up to 8,192 bytes of arbitrary text. When setting the field, if the string argument is longer than 8,192 bytes, the first 8,192 bytes will be copied. The function returns the number of bytes copied, −1 if `arr` is not a shared array or 0 if `arr` is a shared array that doesn’t support the *meta* field. The *meta* field is included in `SHM_VERSION` version 6 headers, added in **spec** release 6.00.08.
  array_dump:
    signature: array_dump([file, ]arr[, arr2...][, options...])
    description: |-
      Efficiently writes the data in the array `arr` and optionally arrays `arr2`, `...`, etc.
      If the initial optional file argument is given, the output is to the named file or device.
      Otherwise, output is to all "on" output devices, most notably the screen.
      The additional optional `options` arguments are strings that control the formatting.

      A format argument can specify a *printf()*-style format for the values.
      The default format is `"%.9g"`, which prints nine digits of precision using fixed point or exponential format, whichever is more appropriate to the value’s magnitude.
      Recognized format characters are `e` or `E` (exponential), `f` (fixed point), `g` or `G` (fixed or exponential based on magnitude), `d` (decimal integer), `u` (unsigned integer), `o` (octal integer), `x` or `X` (hexadecimal integer).
      All formats accept standard options such as precision and field width.
      For example, `"%15.8f"` uses fixed-point format with eight digits after the decimal point and a fifteen-character-wide field.
      For the integer formats, double values will be converted to integers.
      Also, initial characters can be included in the format string, for example, `"0x%08x"` is valid.

      The option `"%D=c"`, specifies an alternate delimiter character `c` to replace the default space character delimiter that is placed between each element in a row of output.
      For example, one might use a comma, a colon or the tab character with `"%D=,"`, `"%D=:"` or `"%D=\t"`, respectively.
      Use `"%D="` for no delimiter.

      Also, by default, the output is one data row per line.
      Thus, for one-dimensional row-wise arrays, all elements will be printed on one line, while one-dimensional column-wise array will have just one data element per line.
      For two-dimensional arrays, each line will contain one row of data.
      The number of elements per line can be controlled with the options `"%#[C|W]"`.
      For one-dimensional arrays, the number `#` is the number of elements to print per line.
      For two-dimensional arrays, `#` is the number of rows to print per line.
      If an optional `W` is added, the number becomes the number of elements to print per line, which can split two-dimensional arrays at different points in the rows.
      If an optional `C` is added to the option string, a backslash will be added to each line where a row is split.
      (The **C-PLOT** *scans.4* user function can properly interpret such "continued" lines for one-dimensional MCA-type array data.)

      Finally, the various options can be combined in a single string.
      For example,

      ```
      array_dump(data, "%15.4f", "%D=:", "%8W")
      ```

      and

      ```
      array_dump(data, "%15.4f%D=:%8W")
      ```

      work the same.
  array_copy:
    signature: array_copy(dst, src[, ...])
    description: |-
      Fills consecutive bytes in the destination array (or subarray) `dst` with bytes from the source arrays or strings in the subsequent arguments.
      The arrays can be of different types, which allows creating a binary data stream of mixed types.
      If a source argument is not a data array, the string value of the argument is copied.

      As an example of how `array_copy()` might be useful, consider a device that sends and receives a binary stream consisting of four floats followed by two integers then seven more floats.
      Here is how to prepare a byte array containing the mixed binary data types:

      ```
      float array float_d[11]
      ulong array long_d[2]
      ubyte array ubyte_d[52]
      # ... assign values to float_d and long_d, then ...
      array_copy(ubyte_d, float_d[0:3], long_d, float_d[4:])
      sock_put("host", ubyte_d)
      ```

      Note, the source array is not erased prior to the copy.
      The above assignment could also be carried out as follows:

      ```
      array_copy(ubyte_d[0:15,24:], float_d)
      array_copy(ubyte_d[16:], long_d)
      ```

      Four floats consume sixteen bytes. Two integers consume eight bytes.
      The subarray notation selects the first sixteen bytes of `ubyte_d` for the first four floats, then skips eight bytes for where the integers will go, then copies the remainder of the floats.
      Since only as much data will be copied as is contained in the source array and since the source arrays are fixed size, it is not necessary to specify the final byte position in the destinations.

      If the returned data uses the same format, floats and integers can be extracted using similar syntax:

      ```
      sock_get("host", ubyte_d)
      array_copy(float_d, ubyte_d[0:15], ubyte_d[24:])
      array_copy(long_d, ubyte_d[16:23])
      ```

      The function will only copy as many bytes as fit into the preallocated space of the destination array.

      If the source arguments are not data arrays, **spec** will take the string value of the argument and copy the ASCII value of each byte to corresponding bytes in the destination.
      The terminating null byte is not copied.
      If the argument is a number, the string value of the number is what one would see on the display with the `print` command.

      The function returns the updated array `dst`. If `dst` is a subarray, the full array is returned.
      A −1 is returned if `dst` is not a data array.

      Note, this function allows arbitrary bytes to be copied to the elements of float and double arrays, which can result in undefined or not a number (NaN) values for those elements.

      The `array_copy()` function appeared in **spec** release 6.00.07.
  array_read:
    signature: array_read(file, arr[, options])
    description: |-
      Reads data from the ASCII text file `file`, and stuffs the data into the array `arr`.
      For a row-wise array, the values on each line of the file are assigned into successive columns for each row of the array.
      If there are more items on a line in the file than columns in the array, or if there are more points in the file than rows in the array, the extra values are ignored.
      For a column-wise array, each row of the data file is assigned to successive columns of the array.

      If `arr` is a string array, successive bytes from each line of the file are assigned to elements of the array (as of **spec** release 6.04.05).

      Lines beginning with the `#` character are ignored, except for the case where `arr` is a string array.
      There is no limit on the length of the input line.
      Prior to **spec** release 6.03.05, the maximum length was 2,048 characters.
      The only currently recognized option is a `"C=#"`, where `#` is the starting column number in the file to use when making assignments (as of **spec** release 6.03.05).
      Returns −1 if the file can’t be opened, otherwise returns the number of points (bytes in the case of a string array) read and assigned.
  array_pipe:
    signature: array_pipe(program[, args[, arr_out[, arr_in]]]))
  array_plot:
    signature: array_plot(arr[, arr2...]))
    description: |-
      Plots the data in the array `arr` (and optional additional array arguments).
      Depending on whether `arr` is a row-wise or column-wise array, the first column or first row elements are used for *x*.
      Subsequent elements (up to a maximum of 64) are plotted along the *y* axis.
      If preceded by a call of `plot_cntl("addpoint")` and the ranges have not changed, only the last point in the array is drawn.
      If preceded by a call of `plot_cntl("addline")` the current plot will not be erased, and the plot ranges will not be changed.
      The plotting area is not automatically erased by a call of `array_plot()` -- use `plot_cntl("erase")` for that.
      The axis ranges are set using the `plot_range()` function.
      See `plot_cntl()` for other options that affect drawing the plot.
  array_fit:
    signature: array_fit(pars, arr[, arr2...])
    description: |-
      Performs a linear fit of the data in the array `arr`.
      The fitted parameters are returned in the associative array `pars`.
      The function returns the *chi-squared* value of the fit, if the fit was successful.
      A −1 is returned if the covariance matrix is singular.
      The fit algorithm is along the same lines as the *lfit()* routine in *Numerical Recipes* (W.H. Press, et al., Cambridge University Press, 1986, page 512).
  plot_cntl:
    signature: plot_cntl(cmd)
    description: |-
      Selects built-in plotting features.
      The argument `cmd` is a string of comma- or space-delimited options.
      The following options may be preceded by a minus sign to turn the associated feature off, nothing (or an optional plus sign) to turn the feature on or a question mark to return a value of one or a zero that indicates whether the associated feature is currently on or off:

      - `"xlog"` — Use a logarithmic *x* axis.
      - `"ylog"` — Use a logarithmic *y* axis.
      - `"xexact"` — Force *x*-axis minimum and maximum to be set to the scan end-points (as opposed to being rounded).
      - `"colors"` — Enable the use of colors.
      - `"dots"` — Draw graphics-mode points with large dots.
      - `"lines"` — Connect graphics-mode points with lines.
      - `"ebars"` — Draw vertical lines through each point of length equal to the twice the square root of the *y* value.
      - `"persist"` — Keep graphics mode on after ordinary user input.
      - `"perpetual"` — Keep graphics mode on continuously (appropriate if using X windows, for example).

      Other `plot_cntl()` options are:

      - `"colors=bgnd:win:text:axis:symb:..."` — Assigns colors for drawing the various graphics-mode elements.
        The values for `bgnd` (the background color of the area outside the axis), `win` (the background color of the area inside the axis), `text` (the color of the text), `axis` (the color of the axis) and `symb ...` (the color of the plotting symbols) are integers.
        The first 10 colors are standardized according to the following table:

        - 0 background (normally white or black)
        - 1 foreground (normally black or white)
        - 2 blue
        - 3 red
        - 4 green
        - 5 yellow
        - 6 cyan
        - 7 magenta
        - 8 white
        - 9 black

        Other colors may be available depending on the particular device. You don’t have to assign values to all colors.
      - `"colors[numb]"` — Returns the current color assignments, where `numb` is a number between zero and 67.
        Numbers zero through three return the colors assigned to the `bgnd`, `win`, `text` and `axis` elements respectively.
        Numbers from 4 through 67 return the colors assigned to the symbols for data elements zero through 63.
      - `"filternumb"` — Selects filter number `numb`, where `numb` can be any of the numerals from 1 through 5. All plotting commands are directed to this filter. The default filter is filter 1. Each filter is associated with a separate process. On an X windows display, each filter is associated with a separate window.
      - `"title=string"` — On an X windows display, the title given by string is used in the *XSetWMName()* and *XSetWMIconName()* calls to set the window and icon labels.
        With most X11 window managers, that means the title will appear in the window’s title bar.
      - `"geometry=widthxheight+xoff+yoff"` — With the *x11* high-resolution plot windows, sets the size and position of the window.
        As with the conventional X11 syntax for specifying window geometry, not all parts of the geometry string are required.
      - `"open"` — Turn on graphics mode.
        If there is no graphics filter program currently active for the current filter number (see above), the filter program associated with the current `GTERM` variable is started.
        Recognized `GTERM` values are `vga`, `ega`, `cga`, `herc`, `x11`, and `sun`.
      - `"close"` — Turn off graphics mode, unless the perpetual or persistent mode has been selected.
      - `"kill"` — Turn off graphics mode and terminate graphics process.
      - `"erase"` — Clear the graphics-mode screen (or the text screen if graphics mode is off).
      - `"addpoint"` — Before a call to `data_plot()` will cause the plot to be made with minimal redrawing.
        Used for updated plotting during scans.
      - `"addline"` — Before a call to `data_plot()` will prevent the current data from being erased and the new data from changing the ranges when the new data points are drawn. Used for plotting several data sets from different data groups on top of each other.
      - `"mca"` — Before a call to `data_plot()` will cause the data points to be displayed using a minimal redrawing algorithm, appropriate for displaying data actively being accumulated by an MCA-type device.
        The `"dots"` and `"ebars"` modes must be turned off for the algorithm to work effectively.
      - `"lp"` — Before a call to `data_plot()` will generate printing instructions appropriate for plotting on a 132-column printer.
  plot_move:
    signature: plot_move(x, y[, string[, color]])
    description: |-
      Moves the current position to column `x` and row `y`, where column 0, row 0 is the upper left corner of the screen.
      If the third argument `string` is present, it is written as a label at the given position.
      If using color high-resolution graphics, the fourth argument, if present, is the color to use to draw the label.
      The background color for the entire label will be the background color at the starting position.
      If graphics mode is not on, `plot_move()` works just as `tty_move()`.
      Returns **true**.
  plot_range:
    signature: plot_range(xmin, xmax, ymin, ymax)
    description: |-
      Sets the ranges of the internally generated plots.
      If any of the arguments is the string `"auto"`, the corresponding range limit is determined automatically from the data at the time the plot is drawn.
      If any of the arguments is the string `"extend"`, the corresponding range limit is only changed if the current data decrease the minimum or increase the maximum.
      Returns **true**.
  splot_cntl:
    signature: splot_cntl(cmd)
  data_grp:
    signature: data_grp(grp, npts, wid)
    description: |-
      Configures data group `grp`.
      The group will have `npts` points, each having `wid` elements.
      If `npts` and `wid` match the previous values for the group, the data in the group is unchanged.
      Otherwise, the data values of the reconfigured group are set to zero.
      If `wid` is zero, the group is eliminated.
      If `npts` is zero, as many points as possible are configured.
      If `npts` is negative, as many points as possible, but not more than −`npts` are configured.
      If `grp` is −1, the current group configuration is displayed.
  data_info:
    signature: data_info(grp, what)
    description: |-
      Returns data group configuration information for group `grp`, according to the the string `what`.
      Values for what are:

      - `"npts"` — the number of configured points.
      - `"elem"` — the number of configured elements.
      - `"last"` — the number of the last point added to the group.
      - `"precision"` — the number of bytes per element, either 4 or 8.

      If the group number is invalid, or if the string `what` is none of the above, returns −1.
  data_get:
    signature: data_get(grp, npt, elem)
    description: |-
      Returns the value of element `elem` of point `npt` in group `grp`.
  data_put:
    signature: data_put(grp, npt, elem, val)
    description: |-
      Assigns the value `val` to element `elem` of point `npt` in group `grp`.
  data_nput:
    signature: data_nput(grp, npt, val0[, val1...])
    description: |-
      Assigns values to point `npt` of group `grp`.
      Element 0 is assigned `val0`, element 1 is assigned `val1`, etc.
      Not all elements need be given, although elements are assigned successively, starting at element 0.
  data_uop:
    signature: data_uop(g_src, e_src, g_dst, e_dst, uop[, val])
    description: |-
      Performs the unary operation specified by the string `uop` on element `e_src` for all points in group `g_src`.
      The results are put in element `e_dst` of the corresponding points in group `g_dst`.
      The source and destination groups and/or elements may be the same.
      If the number of points in the groups differ, the operation is carried out on up to the smallest number of points among the groups.
      Values for uop are:

      - `"clr"` — clear to zero.
      - `"fill"` — each element is set to point number, starting at 0.
      - `"neg"` — Negative of source.
      - `"abs"` — Absolute value of source.
      - `"inv"` — Inverse of source.
      - `"sin"` — Sine of source.
      - `"cos"` — Cosine of source.
      - `"tan"` — Tangent of source.
      - `"asin"` — Arcsine of source.
      - `"acos"` — Arccosine of source.
      - `"atan"` — Arctangent of source.
      - `"log"` — Natural logarithm of source.
      - `"exp"` — Exponential of source.
      - `"log10"` — Log base 10 of source.
      - `"pow"` — The `val` power of source.
      - `"copy"` — Value of source.
      - `"rev"` — Reversed copy of source.
      - `"sqrt"` — Square root of source.
      - `"set"` — All elements set to the value of `val`.
      - `"contract"` — Every `val` points are averaged to make a new point.
      - `"add"` — Source plus `val`.
      - `"sub"` — Source minus `val`.
      - `"mul"` — Source times `val`.
      - `"div"` — Source divided by `val`.
  data_bop:
    signature: data_bop(g0_src, e0_src, g1_src, e1_src, g_dst, e_dst, bop)
    description: |-
      Performs the binary operation specified by the string `bop` on elements `e0_src` and `e1_src` for all points in the groups `g0_src` and `g1_src`.
      The results are put in element `e_dst` for the corresponding points of group `g_dst`.
      The source and destination groups and/or elements may be the same.
      If the number of points in the groups differ, the operation is carried out on up to the smallest number of points among the groups.
      Values for `bop` are:

      - `"add"` — The sum of the source elements.
      - `"sub"` — Source 0 minus source 1.
      - `"mul"` — The product of the source elements.
      - `"div"` — Source 0 divided by source 1.

      If the divide would result in an exception, the operation is not performed and a count of the operations skipped is printed as an error message.
  data_anal:
    signature: data_anal(grp, start, npts, el_0, el_1, op[, val])
    description: |-
      Performs the operations indicated by `op` on `npts` points in group `grp`, starting at point `start`.
      The operations use the values in element `el_0` (if applicable) and `el_1`.
      If `npts` is zero, the operations are performed on points from `start` to the last point added using `data_nput()` or `data_put()`.
      The values for `op` are:

      - `"min"` — Returns the minimum value of `el_1`. (`el_0` is unused.)
      - `"max"` — Returns the maximum value of `el_1`. (`el_0` is unused.)
      - `"i_at_min"` — Returns the point number of the data point with the minimum
      value of `el_1`. (`el_0` is unused.)
      - `"i_at_max"` — Returns the point number of the data point with the maximum
      value of `el_1`. (`el_0` is unused.)
      - `"i_<=_value"` — Returns the point number of the nearest data point in `el_1` at
      or below `val`, starting from the first point. (`el_0` is unused.)
      - `"i_>=_value"` — Returns the point number of the nearest data point in `el_1` at
      or above `val`, starting at the last point. (`el_0` is unused.)
      - `"uhmx"` — Returns the value in `el_0` corresponding to half the maximum value
      in `el_1` and at a higher index.
      - `"lhmx"` — Returns the value in `el_0` corresponding to half the maximum value
      in `el_1` and at a lower index.
      - `"sum"` — Returns the sum of the values in `el_1`. (`el_0` is unused.)
      - `"fwhm"` — Returns the full-width in `el_0` at half the maximum value of `el_1`.
      - `"cfwhm"` — Returns the center of the full-width in `el_0` at half the maximum
      value of `el_1`.
      - `"com"` — Returns the center of mass in `el_0` with respect to `el_1`. The value is
      the sum of the products of each `el_0` and `el_1` divided by the number of
      points.
      - `"x_at_min"` — Returns the value of `el_0` at the minimum in `el_1`.
      - `"x_at_max"` — Returns the value of `el_0` at the maximum in `el_1`.
      - `"sumsq"` — Returns the sum of the squares in `el_1`. (`el_0` is unused.)

      The following operations treat a data group as a two dimensional data array with rows indexed by the point number and the columns indexed by the element number.
      The operations work on the portion of the group determined by the starting row `start`, the number of rows `npts`, the starting column `el_0` and the end row `el_1`.
      As usual, if `npts` is zero, all points (rows) from `start` to the last are considered.
      A negative element (column) number is added to the group width to obtain the element (column) to use.

      - `"gmin"` — Returns the minimum value.
      - `"gmax"` — Returns the maximum value.
      - `"gsum"` — Returns the sum of all values.
      - `"i_at_gmin"` — Returns the index number of the minimum value. The index number is the row number times the group width plus the element number.
      - `"i_at_gmax"` — Returns the index number, as defined above, of the maximum value.
  data_read:
    signature: data_read(file_name, grp, start, npts)
    description: |-
      Reads data from the ASCII file `file_name`, and stuffs the data into group `grp` starting at point `start`, reading up to `npts` points.
      If `npts` is zero, all the points in the file are read.
      The values on each line of the file are assigned into successive elements for each point in the group.
      If there are more elements on a line in the file than fit in the group, or if there are more points in the file than in the group, the extra values are ignored.
      Lines beginning with the `#` character are ignored.
      Returns −1 if the file can’t be opened, otherwise returns the number of points read.
  data_fit:
    signature: data_fit(pars, grp, start, npts, el_data, el_data[, ...])
    description: |-
      Performs a linear fit of the data in element `el_data` to the terms in the elements specified by `el_pars`.
      The fitted parameters are returned in the array `pars` supplied by the user.
      The function returns the *chi-squared* value of the fit, if the fit was successful.
      A −1 is returned if there are insufficient arguments or the covariance matrix is singular.
      The fit algorithm is along the same lines as the *lfit()* routine in *Numerical Recipes* (W. H. Press, et al., Cambridge University Press, 1986, page 512).
  data_plot:
    signature: data_plot(grp, start, npts, el_0, el_1[, el_2...])
    description: |-
      Plots the current data in group `grp` starting at point start and plotting `npts` points.
      Element `el_0` is used for *x*.
      Elements given by the subsequent arguments (up to a maximum of 64) are plotted along the *y* axis.
      The element arguments can be combined in a single space- or comma-delimited string, which can make creation of macros to plot a variable numbers of curves in the same plot window easier.

      If `npts` is zero, only the points from start to the last point added using `data_nput()` or `data_put()` are plotted.

      If preceded by a call of `plot_cntl("addpoint")` and the ranges have not changed, only point `start + npts − 1` is drawn.
      If preceded by a call of `plot_cntl("addline")` the current plot will not be erased, and the plot ranges will not be changed.
      
      The plotting area is not automatically erased by a call of `data_plot()` − use `plot_cntl("erase")` for that.
      The axis ranges are set using the `plot_range()` function.
      See `plot_cntl()` for other options that affect drawing the plot.
  data_dump:
    signature: data_dump(grp, start, npts, el_0[, el_1 ...][, fmt1][, fmt2])
    description: |-
      Efficiently writes elements from group `grp` to turned on output devices.
      The starting point is start and the number of points is npts.
      The elements specified by `el_0`, `e1_1`, etc., are printed.
      If `el_0` is the string `"all"`, all the elements for each point are printed.
      If `npts` is zero, only the points from `start` to the last point added using `data_nput()` or `data_put()` are printed.
      The element arguments can be combined in a single space- or comma-delimited string.

      The optional argument `fmt1` is a string, having the format `"%#"`, that specifies how many data points (specified by the number `#`) are to be printed on each line.
      If the number `#` is followed by the letter `C`, a backslash is added to each continued line, appropriate for saving MCA data in manageable length lines.
      New versions (since May 1, 1995) of the **C-PLOT** *scans.4* user function interpret the continued lines correctly for MCA data.
      The optional argument `fmt2` is a string that specifies an alternate *printf()*-style format for the values.
      Only `e`, `g` and `f` formats are recognized.
      For example, `"%15.8f"` uses fixed-point format with eight digits after the decimal point and a fifteen-character-wide field.
      The default output format is `"%g"`.
      See *printf()* in a C manual for more information.
      Note that in the default installation, the internal data arrays use single-precision floating values, which contain only about 8 decimal digits of significance.

  ### Binary Input/Output

  fmt_read:
    signature: fmt_read(file, fmt, arr[, header[, flags]])
    description: |-
      In these functions `file` is the name of the data file, `fmt` selects which format to use and `arr` is the data array.
      The optional `header` argument is an associative array that may containing identifying information to be saved with the binary values in the data array.
      The optional `flags` argument is reserved for future enhancements.
  fmt_write:
    signature: fmt_write(file, fmt, arr[, header[, flags]])
    description: |-
      In these functions `file` is the name of the data file, `fmt` selects which format to use and `arr` is the data array.
      The optional `header` argument is an associative array that may containing identifying information to be saved with the binary values in the data array.
      The optional `flags` argument is reserved for future enhancements.
  fmt_close:
    signature: fmt_close(file, fmt)
    description: |-
      In these functions `file` is the name of the data file, `fmt` selects which format to use and `arr` is the data array.
      The optional `header` argument is an associative array that may containing identifying information to be saved with the binary values in the data array.
      The optional `flags` argument is reserved for future enhancements.
  data_pipe:
    signature: data_pipe(program[, args[, <grp_out|arr_out>[, <grp_in|arr_in>]]])
    overloads:
    - signature: data_pipe("?")
      description: |-
        Lists the currently running data-pipe processes with name and process id.
    - signature: data_pipe(program, "kill")
      description: |-
        Kills the process associated with `program`.
    - signature: data_pipe(program[, args[, grp_out|arr_out[, grp_in|arr_in]]])
      description: |-
        Initiates or resumes synchronous execution of the special process named program.
        If `program` contains a `/` character, then it contains the complete absolute or relative path name of the program to run.
        Otherwise the program must be in the `SPECD`/*data_pipe* directory, where `SPECD` is the built-in **spec** variable containing the path name of **spec**’s auxiliary file directory.
        You can use the string `"."` for `program` as an abbreviation for the same program name as used in the last call to `data_pipe()`.

        The string value of `args` is made available to the user code in the program as described in the next section.

        The optional arguments `grp_out` and `grp_in` are data group numbers.
        If `grp_out` is present, the contents of that group are sent to the data-pipe program.
        If `grp_in` is present, it is the number of the data group that will receive values from the data-pipe program.
        The data-pipe program configures the size of `grp_in` for an implicit call to `data_grp()` within `data_pipe()`.
        If the `grp_in` argument is absent, **spec** will not receive data-group data from the data-pipe program.
        If `grp_out` is also absent, group data won’t be sent to the data-pipe program.
        Even without group arguments, the data-pipe program can still return values to **spec** in the form of assigning a number or string return value to `data_pipe()`.

        ( **paragraphs below not shown** )

  ### Client/Server Functions

  prop_send:
    signature: prop_send(property, value)
  prop_get:
    signature: prop_get(host, property)
  prop_put:
    signature: prop_put(host, property, value)
  prop_watch:
    signature: prop_watch(host, property)
  remote_stat:
    signature: remote_stat(host[, "?"])
    overloads:
    - signature: remote_stat(host)
    - signature: remote_stat(host, "?")
  remote_par:
    signature: remote_par(host, cmd[, value])
    overloads:
    - signature: remote_par(host, "connect")
    - signature: remote_par(host, "close")
    - signature: remote_par(host, "abort")
    - signature: remote_par(host, "timeout"[, value])
  remote_cmd:
    signature: remote_cmd(host, cmd)
  remote_eval:
    signature: remote_eval(host, cmd)
  remote_async:
    signature: id = remote_async(host, cmd)
  remote_poll:
    signature: remote_poll(id[, "status"])
    overloads:
    - signature: remote_poll(id, "status")
    - signature: remote_poll(id)
  encode:
    signature: encode(format, obj[, ...])
    comments: 'cited from [CSS spec help pages: funcs](https://www.certif.com/spec_help/funcs.html).'
    description: |-
      Returns a string representation of the **spec** data objects `obj ...` in the specified `format`.
      Currently the only recognized format is `"json"`.
      See the [encode](https://www.certif.com/spec_help/funcs.html) help file for details.
  decode:
    signature: decode(format, string)
    comments: 'cited from [CSS spec help pages: funcs](https://www.certif.com/spec_help/funcs.html).'
    description: |-
      Returns a **spec** data object obtained from the string `str` in `format`.
      Currently the only recognized format is `"json"`.
      See the [encode](https://www.certif.com/spec_help/funcs.html) help file for details.

  ## Hardware Functions and Commands

  ### Controlling Motors

  motor_mne:
    signature: motor_mne(motor)
    description: |-
      Returns the string mnemonic of motor number `motor` as given in the configuration file.
      (Mnemonics are, at most, 7 characters long.)
      Resets to command level if not configured for `motor`.
  motor_name:
    signature: motor_name(motor)
    description: |-
      Returns the string name of motor number `motor` as given in the configuration file.
      (Names are, at most, 15 characters long.)
      Returns `"?"` if not configured for `motor`.
  motor_num:
    signature: motor_num(mne)
    description: |-
      Returns the motor number corresponding to the motor mnemonic `mne`, or −1 if there is no such motor configured.
      As of **spec** release 6.05.01, `mne` can be a variable or an expression.
      If `mne` is an uninitialized variable, −1 is returned.
  motor_par:
    signature: motor_par(motor, par[, val])
    description: |-
      Returns or sets configuration parameters for motor `motor`.
      Recognized values for the string `par` follow.
      Note, not all parameters are meaningful for all motor controllers.

      - `"step_size"` — returns the current step-size parameter.
        The units are generally in steps per degree or steps per millimeter.
        If `val` is given, then the parameter is set to that value, but only if changes to the step-size parameter have been enabled using `spec_par("modify_step_size", "yes")`.
      - `"acceleration"` — returns the value of the current acceleration parameter.
        The units of acceleration are the time in milliseconds for the motor to accelerate to full speed.
        If `val` is given, then the acceleration is set to that value.
      - `"base_rate"` — returns the current base-rate parameter.
        The units are steps per second.
        If `val` is given, then the base rate is set to that value.
      - `"velocity"` — returns the current steady-state velocity parameter.
        The units are steps per second.
        If `val` is given, then the steady-state velocity is set to that value.
      - `"backlash"` — returns the value of the backlash parameter.
        Its sign and magnitude determine the direction and extent of the motor’s backlash correction.
        If `val` is given, then the backlash is set to that value.
        Setting the backlash to zero disables the backlash correction.
      - `"config_step_size"` — returns the step-size parameter contained in the *config* file.
      - `"config_acceleration"` — returns the acceleration parameter contained in the *config* file.
      - `"config_velocity"` — returns the steady-state velocity parameter contained in the *config* file.
      - `"config_base_rate"` — returns the base-rate parameter contained in the *config* file.
      - `"config_backlash"` — returns the backlash parameter contained in the *config* file.
      - `"controller"` — returns a string containing the controller name of the specified motor.
        The controller names are those used in **spec**’s *config* files.
      - `"unit"` — returns the unit number of the specified motor.
        Each motor controller unit may contain more than one motor channel.
      - `"channel"` — returns the channel number of the specified motor.
      - `"responsive"` — returns a nonzero value if the motor responded to an initial presence test or appears otherwise to be working.
      - `"active"` — returns a nonzero value if the motor is currently moving.
      - `"disable"` — returns a nonzero value if the motor has been disabled by software.
        If `val` is given and is nonzero, then the motor is disabled.
        If val is given and is zero, the motor becomes no longer disabled.
        A disabled motor channel will not be accessed by any of **spec**’s commands, and, of course, cannot be moved.
        Any `cdef()`-defined macros will automatically exclude the portions of the macro keyed to the particular motor when the motor is software disabled.
      - `"slop"` — returns the value of the slop parameter.
        If `val` is given, sets the slop parameter.
        When this parameter is present, discrepancies between hardware and software motors positions are silently resolved in favor of the the hardware when the number of steps in the discrepancy is less than the value of the slop parameter. (Not yet implemented for all motor controllers.)
      - `"home_slew_rate"` — returns the value of the home-slew-rate parameter.
        If `val` is given, sets the parameter.
        This parameter is the steady-state velocity used during a home search.
        (Only available for selected controllers.)
      - `"home_base_rate"` — returns the value of the home-base-rate parameter.
        If `val` is given, sets the parameter.
        This parameter is the base-rate velocity used during a home search.
        (Only available for selected controllers.)
      - `"home_acceleration"` — returns the value of the home-acceleration parameter.
        If `val` is given, sets the parameter.
        This parameter is the acceleration used during a home search.
        (Only available for selected controllers.)
      - `"dc_dead_band"` — returns the value of the dead-band parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_settle_time"` — returns the value of the settle-time parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_gain"` — returns the value of the gain parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_dynamic_gain"` — returns the value of the dynamic-gain parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_damping_constant"` — returns the value of the damping-constant parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_integration_constant"` — returns the value of the integration-constant parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_integration_limit"` — returns the value of the integration-limit parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_following_error"` — returns the value of the dc-following parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"dc_sampling_interval"` — returns the value of the sampling-interval parameter for certain DC motors.
        Sets the parameter if `val` is given.
      - `"encoder_step_size"` — returns the value of the encoder step size parameter.
        Sets the parameter if `val` is given.
      - `"step_mode"` — returns the value of the step-mode parameter.
        Sets the parameter if `val` is given.
        A zero indicates full-step mode, while a one indicates half-step mode.
      - `"deceleration"` — returns the value of the deceleration parameter.
        Sets the parameter if `val` is given.
      - `"torque"` — returns the value of the torque parameter.
        Sets the parameter if `val` is given.

      Rereading the *config* file resets the values of all the motor parameters to the values in the *config* file.
      Little consistency checking is done by **spec** on the values programmed with `motor_par()`.
      You must be sure to use values meaningful to your particular motor controller.

      In addition, device-dependent values for `par` are available for specific motor controllers.
      See the *Hardware Reference* for values for specific controllers.
  dial:
    signature: dial(motor, user_angle)
    description: |-
      Returns the dial angle for motor `motor` corresponding to user angle `user_angle` using the current *offset* between user and dial angles for `motor`.
      The value returned is *(user_angle − offset) / sign*, where *sign* is ±1 and is set in the *config* file.
      The value is rounded to the motor resolution as set by the step-size parameter in the *config* file.
      Resets to command level if not configured for motor `motor`.
  read_motors:
    signature: read_motors(how)
    description: |-
      Reads the current motor positions from the motor controllers and places the values in the `A[]` array, depending on the value of the argument `how`.
      If bit 1 is set, the function returns dial values, otherwise user values are returned.
      If bit 2 is set, a forced read of all hardware takes place.
      (For efficiency, normally most motor controllers are not read if the position hasn’t been changed by a move.)
      If bit 3 is set and if there is a discrepancy between the software and hardware, the software will be silently corrected to match the hardware.
      Note, the forced-read and “silent-sync” features are not yet implemented for all motor controllers.
      Check the *Hardware Reference* or contact CSS for hardware-specific information.
  move_info:
    signature: move_info([motor|keyword|motor, keyword])
    description: |-
      The `move_info()` function returns information about what would happen on a subsequent `move_all` command given the current motor positions and current values in the `A[]` array.
      Such a function might be called, for example, within the `user_premove` macro to determine which motors will be moved to allow extra limit checking involving the relative postions of motors.
      
      If called with no arguments, returns a two-dimensional associative array containing the move information.
      The array is indexed by motor number and information keyword.
      The keywords are:

      - `"to_move"` - nonzero if motor will move
      - `"error"` - reason the motor will not move
      - `"commanded"` - the commanded position
      - `"magnitude"` - magnitude of the move in user units
      - `"current"` - current position in user units
      - `"current_dial"` - current position in dial units
      - `"target"` - target position in user units
      - `"target_dial"` - target position in dial units
      - `"backlash"`- backlash for this move in user units
      - `"leftover"` - remainder due to motor resolution
      
      If called with a single argument that is one of the above keywords, the function returns a one-dimensional associative array indexed by motor number containing values for that keyword for each motor.
      If called with a motor number or mnemonic as a single argument, the function returns a one-dimensional associative array, indexed by the above keywords containing values for the one motor.
      If called with two arguments, motor number and keyword, the function returns the corresponding single value.
      
      No matter how the function is called, the internal code will calculate values for all motors.
      Thus, if multiple values are needed, it is most efficient and recommended to call the function once selecting arguments that will return all the needed values.

      The `"to_move"` element will be 1 or 0, indicating whether the motor would move or not.
      If there is condition that prevents the move, the `"error"` element will contain one of these strings:

      - `"low limit"` - move exceeds low limit
      - `"high limit"` - move exceeds high limit
      - `"busy"` - motor is busy
      - `"read only"` - motor is configured as read only
      - `"protected"` -  motor configuration does not allow moving
      - `"disabled"` -  motor has been disabled
      - `"externally disabled"` - shared motor has been disabled
      - `"unusable"` -  motor did not respond to presence test
      
      Otherwise, there will be no `"error"` array element.
      
      The `"target"` and `"target_dial"` values are the final position after backlash.
      The `"magnitude"` value contains the distance to the target position and does not include the magnitude of the backlash.
      
      The `"leftover"` value is the fractional value that is the difference between the requested position and the achievable position given the finite resolution of the motor.
      For example, if a motor has 1000 steps per degree, each step corresponds to 0.001 degrees.
      If one asks to move the motor to a position of 1.0004 degrees, the motor will move to 1 degree and the leftover value will be 0.0004 degrees.

      The `"commanded"` value is the target position in user units to the full precision requested.
      The other postion-related values are rounded to the motor resolution.
      The `"commanded"` position is saved after a move and is available using special arguments to the built-in `read_motors()` functions.
      
      As mentioned above, if multiple values are needed, it is better to make a single call of `move_info()` saving the return values in an array, rather than making multiple calls, as each call involves calculations for all the motor positions and values, even if only selected values are returned.
      For example,
      
      ```
      {
        local i, m[]
        m = move_info()
        for (i = 0; i < MOTORS; i++)
          if (m[i]["to_move"]) {
                  ...
          }
      }
      ```
      
      For the most part, the `move_info()` function will reflect what will happen on the next `move_all` command.
      However, for shared motors that can be moved by other processes or for motors that have positions that drift or have jitter, the status and position may change between the `move_info()` call and the `move_all` call.
    overloads:
    - signature: move_info()
      description: |-
        Returns a two-dimensional associative array containing the move information.
    - signature: move_info(motor)
      description: |-
        Returns a one-dimensional associative array, indexed by the above keywords containing values for the one motor.
    - signature: move_info(keyword)
      description: |-
        Returns a one-dimensional associative array indexed by motor number containing values for that keyword for each motor.
    - signature: move_info(motor, keyword)
      description: |-
        Returns the corresponding single value.
  chg_dial:
    signature: chg_dial(motor, <dial_angle|cmd>)
    overloads:
    - signature: chg_dial(motor, dial_angle)
      description: |-
        Sets the dial position of motor `motor` to `dial_angle`.
        Returns nonzero if not configured for `motor` or if the protection flags prevent the user from changing the limits on this motor.
        Resets to command level if any motors are moving.
    - signature: chg_dial(motor, cmd)
      description: |-
        Starts motor `motor` on a home or limit search, according to the value of `cmd` as follows:
        
        - `"home+"` — Move to home switch in positive direction.
        - `"home-"` — Move to home switch in negative direction.
        - `"home"` — Move to home switch in positive direction if current dial position is less than zero, otherwise move to home switch in negative direction.
        - `"lim+"` — Move to limit switch in positive direction.
        - `"lim-"` — Move to limit switch in negative direction.
        
        Positive and negative direction are with respect to the dial position of the motor.
        (At present, most motor controllers do not implement the home or limit search feature.)
        Returns −1 if not configured for motor `motor` or if the motor is protected, unusable or moving, else returns zero.
  get_lim:
    signature: get_lim(motor, flag)
    description: |-
      Returns the dial limit of motor number `motor`.
      If `flag` > 0, returns the high limit.
      If `flag` < 0, returns the low limit.
      Resets to command level if not configured for `motor`.
  user:
    signature: user(motor, dial_angle)
    description: |-
      Returns the user angle for `motor` corresponding to dial angle `dial_angle` using the current *offset* between user and dial angles for `motor`.
      The value returned is *sign × dial_angle + offset*, where *sign* is ±1 and is set in the *config* file.
      The value is rounded to the motor resolution as set by the step-size parameter in the *config* file.
      Resets to command level if not configured for `motor`.
  chg_offset:
    signature: chg_offset(motor, user_angle)
    description: |-
      Sets the offset between the dial angle and the user angle, using the current dial position and the argument `user_angle` for motor `motor` according to the relation *user_angle = offset + sign × dial_angle* where *sign* is ±1 and is set in the *config* file.
      Returns nonzero if not configured for `motor`.
      Resets to command level if any motors are moving.
  set_lim:
    signature: set_lim(motor, low, high)
    description: |-
      Sets the low and high limits of motor number `motor`.
      `low` and `high` are in dial units.
      It does not actually matter in which order the limits are given.
      Returns nonzero if not configured for `motor` or if the protection flags prevent the user from changing the limits on this motor.
      Resets to command level if any motors are moving.

  ### Counting

  mcount:
    signature: mcount(counts)
    description: |-
      Starts the timer/clock counting for `counts` monitor counts.
      Returns zero.
  tcount:
    signature: tcount(t)
    description: |-
      Starts the timer/clock counting for `t` seconds, where `t` may be nonintegral.
      Returns zero.
  cnt_mne:
    signature: cnt_mne(counter)
    description: |-
      Returns the string mnemonic of counter number `counter` as given in the configuration file.
      (Mnemonics are, at most, 7 characters long.)
      Resets to command level if not configured for `counter`.
  cnt_name:
    signature: cnt_name(counter)
    description: |-
      Returns the string name of counter number `counter` as given in the configuration file.
      (Names are, at most, 15 characters long.)
      Returns `"?"` if not configured for `counter.
  cnt_num:
    signature: cnt_num(mne)
    description: |-
      Returns the counter number corresponding to the counter mnemonic `mne`, or −1 if there is no such counter configured.
      As of **spec** release 6.05.01, `mne` can be a variable or an expression.
      If `mne` is an uninitialized variable, −1 is returned.
  counter_par:
    signature: counter_par(counter, par[, val])
    description: |-
      Returns or sets parameters associated with counter number `counter` as given in the configuration file.
      The following `par` arguments are supported for all counters:

      - `"unit"` — returns the unit number of the indicated counter.
      - `"channel"` — returns the channel number of the indicated counter.
      - `"scale"` — returns the value of the scale factor set in the *config* file for the indicated counter.
      - `"responsive"` — returns nonzero if the hardware appears to be working for the indicated counter.
      - `"controller"` — returns a string that indicates the controller type of the indicated counter.
      - `"disable"` — returns a nonzero value if the counter has been disabled by software. If `val` is given and is nonzero, then the counter is disabled. If `val` is given and is zero, the counter becomes no longer disabled. A disabled counter channel will not be accessed by any of **spec**’s counting commands. Any `cdef()`-defined macros will automatically exclude the portions of the macro keyed to the particular counter when the counter is software disabled.

      In addition, device-dependent values for `par` are available for specific counter models.
      See the *Hardware Reference* for values for specific controllers.

  ### Miscellaneous

  set_sim:
    signature: set_sim(how)
    description: |-
      If `how` is 0, simulate mode is turned off.
      If `how` is 1 (or positive), simulate mode is turned on.
      In either case the program waits for moving and counting to finish before changing the mode, and the function returns the previous mode (0 or 1).
      If `how` is −1 (or negative) the function returns the current value of simulation mode without changing it.
      Whenever simulation mode is turned off, the motor settings file is reread to restore the motor positions.
      Simulation mode cannot be turned off if **spec** was invoked with the **−s** flag.
  wait:
    signature: wait([mode])
    overloads:
    - signature: wait()
      description: |-
        Waits for all active motors, timers, counters, MCA- and image-type activity to complete.
        Returns **true**.
    - signature: wait(mode)
      description: |-
        Waits for specified activity to complete or returns status indicating whether specified activity is active.
        The function `wait()` is used to synchronize the flow of commands in **spec** with moving, counting and other activity.
        Since the built-in commands and functions `move_all`, `move_cnt`, `tcount()` and `mcount()` return immediately after starting moving or counting, macros need to include some form of `wait()` if the next command requires the previous move or count to complete.

        Bits set in the mode argument affect the behavior as follows:

        | Bit | Value | Activity Waited For Or Other Action
        | ---: | ---: | :--- |
        |   |  0 | Moving, counting and other acquisition
        | 0 |  1 | Moving
        | 1 |  2 | Counting (by the master timer)
        | 2 |  4 | Other acquisition (MCAs, CCDs, etc.)
        | 3 |  8 | Remote connections and remote asynchronous events
        | 4 | 16 | Shared motors started by other clients
        | 5 | 32 | Return zero or nonzero to indicate if busy

        If `mode` is a negative number, `wait()` will behave as for `mode = 0`, but a message will be printed showing what is being waited on.

        For acquisition devices with `"auto_run"` mode enabled (such devices are started automatically during counting), waiting for counting will also include waiting for those devices.

        When **spec** is running as client to a **spec** server, bit 3 checks if `remote_async()` replies have all arrived.
        In addition, bit 3 also checks if all configured **spec** servers have connected and if all **spec** server and EPICS remote motors have connected.

        Waiting for **spec** server and remote motor connections is mainly an issue on start up or after `reconfig`.
        One might use `wait(8)` or `wait(0x28)` in the built-in special macro `config_mac` if it is important to delay until all connections are up.
        Note, until remote **spec** server and EPICS motors are fully connected and usable, the positions reported for those motors will be the last saved positions from **spec**’s *settings* file.

        When **spec** is configured with shared motors either on a **spec** server or using EPICS channel access, if those motors are started by a different client, setting bit 4, as in `wait(16)` will cause **spec** to wait until those motors have completed their move.
        Waiting can be interrupted with a **^C**, but that will not stop the motors.

        Also, note that `wait(0)` does not check for the events flagged by bits 3 or 4.
        To wait for remote events or externally busy motors requires explicitly setting bits 3 or 4 in `mode`.
        Also, a **^C** interrupts a `wait(8)` or `wait(16)` but doesn’t change the conditions that caused `wait(8)` or `wait(16)` to block.
        That is, the next `wait(8)` will still block if there are still pending connections, and the next `wait(16)` will still block if the external motors are still moving.

        If bit 5 (0x20) in `mode` is set, `wait()` returns **true** (1) if the activities flagged by bits 0, 1, 2, 3 or 4 are still going on, otherwise `wait()` returns **false** (0).
  stop:
    signature: stop([mode])
    overloads:
    - signature: stop()
      description: |-
        Stops all asynchronous activity.
        Returns true.
    - signature: stop(mode)
      description: |-
        If `mode` has bit one set (1), stops all motors that are moving.
        If `mode` has bit two set (2), stops the timer, counters and any other data acquisition (multi-channel scaling, for example).

  ### MCA (1D) Data Acquisition

  mca_sel:
    signature: mca_sel(<n|"?">)
    overloads:
    - signature: mca_sel(n)
      description: |-
        Selects which MCA-type device to use with subsequent `mca_get()`, `mca_put()` and `mca_par()` commands.
        The numbering of MCA-type devices is set in the *config* file.
        Returns −1 if not configured for device `n`, otherwise returns zero.
        It is not necessary to use `mca_sel()` if only one MCA-type device is configured.
        The selected MCA-type device does not change when reading the *config* file with the `reconfig` command.
    - signature: mca_sel("?")
      description: |-
        lists the configured MCA devices, with the currently selected device marked with an asterisk.
  mca_par:
    signature: mca_par(par[, val])
    description: |-
      A device-dependent function to access various features and parameters of the currently selected MCA-type device.
      The string `par` selects an option.
      The argument `val` contains an optional numeric value.
      See the help file for the particular device for implemented options and return values.
  mca_get:
    signature: mca_get(<grp, elem|array>)
    description: |-
      Gets data from the currently selected MCA-type device, and transfers it to element `elem` of data group `grp` or to the elements of the data array `array`.
      Generally returns the number of points read or −1 for failure.
    overloads:
    - signature: mca_get(grp, elem)
    - signature: mca_get(array)
  mca_put:
    signature: mca_put(<grp, elem|array>)
    description: |-
      Sends data from data group `grp`, element `elem` or from the data array `array` to the currently selected MCA-type device.
      Generally returns the number of points written or −1 for failure.
    overloads:
    - signature: mca_put(grp, elem)
    - signature: mca_put(array)
  mca_spar:
    signature: mca_spar(sel, par[, val])
    description: |-
      As `mca_par()`, but selects which MCA device with the `sel` argument.
  mca_sget:
    signature: mca_sget(sel, <grp, elem|array>)
    description: |-
      As `mca_get()` but selects which MCA device with the `sel` argument.
    overloads:
    - signature: mca_sget(sel, grp, elem)
    - signature: mca_sget(sel, array)
  mca_sput:
    signature: mca_sput(sel, <grp, elem|array>)
    description: |-
      As `mca_put()`, but selects which MCA device with the sel argument.
    overloads:
    - signature: mca_sput(sel, grp, elem)
    - signature: mca_sput(sel, array)
    

  ### Image (2D) Data Acquisition

  image_par:
    signature: image_par(sel, par[, val])
  image_get:
    signature: image_get(sel, array)
  image_put:
    signature: image_put(sel, array)

  ### Socket Functions

  sock_get:
    signature: sock_get("host:port"[, <n|eos|d|mode>])
    overloads:
    - signature: sock_get("host:port")
      description: |-
        Reads and returns as many characters as are already available.
        If no characters are immediately available, waits for input and returns the first character(s) that show up, or returns a null string if no characters arrive before the time-out expires.
        The maximum number of characters that can be read at a time is this mode is 8191 characters.
    - signature: sock_get("host:port", n)
      description: |-
        Reads up to `n` characters or until a timeout.
        If `n` is zero, the routine reads up to a newline or the maximum of 8191 characters, whichever comes first.
        In any case, if the read is not satisfied before a timeout, the routine returns the null string.
    - signature: sock_get("host:port", eos)
      description: |-
        Reads characters until a portion of the input matches the string `eos` and returns the string so obtained, including the end-of-string characters.
        If no match to the end-of-string characters is found within the timeout period, the null string is returned.
    - signature: sock_get("host:port", d)
      description: |-
        Reads incoming bytes into the data array `d`.
        The size of `d` determines how many bytes are to be read.
        Sub-array syntax can be used to limit the number of bytes.
        The function returns the number of array elements read, or zero if the read times out.
        Note, no byte re-ordering is done for short- or long-integer data, and no format conversions are done for float or double data.
    - signature: sock_get("host:port", mode)
      description: |-
        If `mode` is the string `"byte"`, reads and returns one unsigned binary byte.
        If `mode` is the string `"short"`, reads two binary bytes and returns the short integer so formed.
        If `mode` is the string `"long"`, reads four binary bytes and returns the long integer so formed.
        The last two modes work the same on both *big-endian* and *little-endian* platforms.
        On both, the incoming data is treated as bigendian.
        If the incoming data is littleendian use `"short_swap"` or `"long_swap"`.
  sock_put:
    signature: sock_put("host:port", <s|d[, cnt]|cmd[, arg]>)
    overloads:
    - signature: sock_put("host:port", s)
      description: |-
        Writes the string `s` to the socket described by `"host:port"`.
        Returns the number of bytes written.
    - signature: sock_put("host:port", d[, cnt])
      description: |-
        Writes the contents of the data array `d` to the socket described by `"host:port"`.
        By default, the entire array (or subarray, if specified) will be sent.
        The optional third argument `cnt` can be used to specify the number of array elements to send.
        For short and long integer arrays, the data will be sent using native byte order.
        The `"swap"` option of the `array_op()` function can be used to change the byte order, if necessary.
        No format conversions are available for float or double data.
        Returns the number of bytes written.
  sock_par:
    signature: sock_par("host:port", cmd[, arg])
    description: |-
      Accesses various features for the given socket with values for `cmd` as follows:

      - `"?"` — Lists the available commands.
      - `"show"` — Lists the existing sockets along with additional information, such as whether the socket is UDP type, whether the socket is internal (as opposed to a user-level socket created by one of the functions described in this document) and whether the socket is set up for listening.
        The command does not check whether the connection is still alive.
      - `"info"` — Returns a string that contains the information displayed by the `"show"` command described above.
      - `"connect"` — Opens a socket to the specified host and port.
        Returns **true** for success and **false** for failure.
        With the string `"silent"` as optional argument, error messages won’t be shown (as of **spec** release 6.00.02).
      - `"connect_udp"` — Opens a socket to the specified host and port using the UDP protocol.
        Returns **true** for success and **false** for failure.
        With the string `"silent"` as optional option, error messages won’t be shown (as of **spec** release 6.00.02).
      - `"listen"` — Sets up a socket for listening, allowing another instance of **spec** or some other program to make a connection.
      - `"close"` — Closes the socket associated with the specified host and port.
      - `"flush"` — Flushes **spec**’s input queue for the socket at `"host:port"`.
        The input queue may contain characters if a `sock_get()` times out before the read is satisfied, or if more characters arrive than are requested.
      - `"ignore_sim"` — With `arg` set to 1 or 0, turns *ignore-simulate* mode on or off, respectively.
        Otherwise, returns the current state.
        When *ignore-simulate* mode is on, the `sock_get()`, `sock_put()` and `sock_par()` commands will work even when simulate mode is on.
        Note, simulate mode must be off to create a new socket connection.
      - `"queue"` — Returns the number of characters in the socket’s input queue.
        The input queue may contain characters if a `sock_get()` times out before the read is satisfied, or if more characters arrive than are requested.
      - `"timeout"` — Returns or sets the read timeout for the socket described by `"host:port"`.
        The units for `arg` are seconds.
        A value of zero indicates no timeout − a `sock_get()` will wait until the read is satisfied or is interrupted by a  **^C**.
        The smallest allowed value of 0.001 will cause the `sock_get()` to return immediately.
        A negative value resets the timeout to the default of five seconds.
      - `"nodelay"` — A value for `arg` of 1 or 0 sets or clears the state of the *TCP_NODELAY* socket option.
        With no argument, the current state is retruned.
        Normally, the underlying TCP protocol sends data along as it is made available.
        However, if the previous data packet has not yet received acknowledgment from the client, the protocol holds onto and gathers small amounts of data into a single packet which will be sent once the pending acknowledgment is received or the size of the packet exceeds a threshold.
        This algorithm increases network efficiency.
        For some clients that send a stream of short packets that receive no replies, this algorithm may cause unwanted delays.
        Set the `"nodelay"` option to 1 to turn off the algorithm, which corresponds to setting the *TCP_NODELAY* option at the system level.

  ### RS-232 Serial Interfaces

  ser_get:
    signature: ser_get(addr[, <n|eos|d|mode>])
    overloads:
    - signature: ser_get(addr)
      description: |-
        If the serial device `addr` is in *cooked* mode, reads and returns a string of bytes, up to and including a newline character, or returns the null string if the read times out.
        If the device is in *raw* mode, the function reads and returns as many characters as are already available in the queue.
        If no characters are available, waits for a character and returns it, or returns a null string if no characters become available within the time-out period.
        The maximum string length in this mode is 8191 characters.
    - signature: ser_get(addr, n)
      description: |-
        If the serial device `addr` is in *cooked* mode, reads up to a newline, but no more than `n` bytes and returns the string so obtained.
        In *cooked* mode, no characters can be read until a newline is received.
        In *raw* mode, reads up to `n` characters or until a timeout.
        If `n` is zero, the routine reads up to a newline or the maximum of 8191 characters, whichever comes first.
        In both cases, if the read is not satisfied before a timeout, the routine returns the null string.
    - signature: ser_get(addr, eos)
      description: |-
        Reads characters until a portion of the input matches the string `eos` and returns the string so obtained, including the end-of-string characters.
        If no match to the end-of-string characters is found within the timeout period, the null string is returned.
    - signature: ser_get(addr, d)
      description: |-
        Reads incoming bytes into the data array `d`.
        The size of `d` determines how many bytes are to be read.
        Sub-array syntax can be used to limit the number of bytes.
        The function returns the number of array elements read, or zero if the read times out.
        Note, no byte re-ordering is done for short- or long-integer data, and no format conversions are done for float or double data.
    - signature: ser_get(addr, mode)
      description: |-
        If `mode` is the string `"byte"`, reads and returns one unsigned binary byte.
        If `mode` is the string `"short"`, reads two binary bytes and returns the short integer so formed.
        If `mode` is the string `"long"`, reads four binary bytes and returns the long integer so formed.
        The last two modes work the same on both *big-endian* and *little-endian* platforms.
        On both, the incoming data is treated as bigendian If the incoming data is littleendian use `"short_swap"` or `"long_swap"`.
  ser_put:
    signature: ser_put(addr, <s|d[, cnt]>)
    overloads:
    - signature: ser_put(addr, s)
      description: |-
        Writes the string `s` to the serial device with address `addr`.
        Returns the number of bytes written.
    - signature: ser_put(addr, d[, cnt]))
      description: |-
        Writes the contents of the data array `d` to the serial device with address `addr`.
        By default, the entire array (or subarray, if specified) will be sent.
        The optional third argument `cnt` can be used to specify the number of array elements to send.
        For short and long integer arrays, the data will be sent using native byte order.
        The `"swap"` option of the `array_op()` function can be used to change the byte order, if necessary.
        No format conversions are available for float or double data.
        Returns the number of bytes written.
  ser_par:
    signature: ser_par(addr, cmd[, arg])
    description: |-
      Accesses various features for the given socket with values for `cmd` as follows:

      - `"device_id"` — Returns the name of the associated serial device or −1 if there is no serial device configured as `addr`.
      - `"responsive"` — Returns 1 if the associated serial device is open, 0 if the device could not be opened and −1 if there is no serial device configured as `addr`.
      - `"drain"` — Waits for pending output on the associated serial device to be transmitted, but can be interrupted with **^C**.
        Use the `"flush"` option, described next, to empty the output queue.
      - `"flush"` — Flushes the input and/or output queues for the serial device with address `addr`.
        If the optional argument `arg` is zero or absent, the input queue is flushed.
        If Otherwise, both queues are flushed.
        The input queue may contain characters if a `ser_get()` times out before the read is satisfied, or if more characters arrive than are requested.
      - `"queue"` — Returns the number of characters in the serial device’s input queue.
        The input queue may contain characters if a `ser_get()` times out before the read is satisfied, or if more characters arrive than are requested.
      - `"timeout"` — Returns or sets the read timeout for the serial device with address `addr`.
        The units for `arg` are seconds.
        A value of zero indicates no timeout − a `ser_get()` will wait until the read is satisfied or is interrupted by a **^C**.
        The smallest allowed value of 0.001 will cause the `ser_get()` to return immediately.
        A negative value resets the timeout to the default of two seconds.
      - `"baud"` — Returns or sets the baud rate for the serial device with address `addr`.
        Valid baud rates are from 300 to 4000000.
        The function returns the device’s baud rate.
        If `arg` isn’t valid or if there was an error, the function returns −1.
        Reading the hardware *config* file resets the baud rate to the value in the file.
        **spec** cannot set the baud rate on `SOCKET` interfaces.
      - `"stop_bits"` — Returns or sets the stop-bits value for the serial device with address `addr`.
        Normal values are one or two.
        The default value of one is appropriate for nearly every serial device, and this command should very rarely be needed.
        Note, to set the non-default value, this command will need to be issued each time after reading the hardware *config* file.
        This mode is not supported on `SOCKET` interfaces.
      - `"data_bits"` — Returns or sets the data-bits value for the serial device with address `addr`.
        Accepted values are 5, 6, 7 and 8.
        The default values of seven if parity is enabled and eight if parity is disabled should work for nearly every serial device, and this command should very rarely be needed.
        Note, to override the default value, this command needs to be issued after reading the hardware *config* file `reconfig`).
        This mode is not supported on `SOCKET` interfaces.
      - `"dtr"` — Returns the current setting or sets or clears the Data Terminal Ready (DTR) control line.
        Only available on standard serial interfaces.
        Reset on hardware reconfiguration.
      - `"rts"` — Returns the current setting or sets or clears the Request To Send (RTS) control line.
        Only available on standard serial interfaces.
        Reset on hardware reconfiguration.
      - `"dsr"` — Returns the current setting of the Data Set Ready (DSR) control line.
        Only available on standard serial interfaces.

      Values for any combination of the parameters `"timeout"`, `"baud"`, `"stop_bits"`, `"data_bits"`, `"dtr"`, and `"rts"` can be set in one call of `ser_par()` by combining assignments in a comma-separated list, as in

      ```
      ser_par(addr, "timeout=1.5,baud=28800,stop_bits=2,data_bits=8")
      ```

  ### GPIB (IEEE-488) Hardware Functions

  gpib_cntl:
    signature: gpib_cntl(addr, cmd)
    description: |-
      Performs the selected GPIB command on the device with address `addr`.
      The string `cmd` is one of the following:

      - `"gtl"` — Go to local.
      - `"llo"` — Local lockout.
      - `"sdc"` — Selected device clear.
      - `"dcl"` — Device clear (sent to all devices).
      - `"get"` — Group execute trigger (sent to addressed device).
      - `"ifc"` — Interface clear. This command resets the GPIB bus by sending the IFC message. The address `addr` is ignored. **spec** runs the same code sequence with the `"ifc"` command as it does when it initializes the GPIB controller on start up or on the `reconfig` command. For most controllers, **spec** sleeps for some fraction of a second after resetting the bus. Also, for most controllers, **spec** asserts the REN (remote enable) command after sending IFC.
      - `"responsive"` — Not a GPIB command, but returns 1 or 0 indicating whether the associated controller is configured and working. Note, the test is on the controller, not the device. To test controllers other than unit 0, the address syntax for `addr` is `"1:1"` or `101` for unit 1, etc. The device address isn’t looked at for this option.
  gpib_get:
    signature: gpib_get(addr[, <n|s|mode>])
    overloads:
    - signature: gpib_get(addr)
      description: |-
        Returns a string from the GPIB device with address `addr`.
        The device must terminate the string with either a newline (`\n`) or a carriage return and a newline (`\r\n`).
        In either case, the terminator is removed before the string is returned.
        At most, 8,192 characters can be read at a time.
    - signature: gpib_get(addr, n)
      description: |-
        As above, but reads `n` bytes and does not look for or remove the terminator.
    - signature: gpib_get(addr, s)
      description: |-
        As above, but tries to read up to the terminator given by the first character of the string `s`, except for the special cases described below.
        The terminator is removed.
    - signature: gpib_get(addr, mode)
      description: |-
        If `mode` is the string `"byte"`, reads and returns one unsigned binary byte.
        The following modes read short or long integers and work the same on both *big-endian* and *little-endian* platforms.
        If `mode` is the string `"int2"` reads two binary bytes and returns the short integer so formed.
        If `mode` is the string `"int4"` reads four binary bytes and returns the long integer so formed.
        By default, the incoming data is treated as *big endian*.
        If the incoming data is *little endian*, use `"int2_swap"` or `"int4_swap"`.
  gpib_put:
    signature: gpib_put(addr, string)
    description: |-
      Writes the string `string` to the device with GPIB address `addr`.
      Returns the number of bytes written.
      The length of the string is not limited, but null bytes cannot be sent.
  gpib_poll:
    signature: gpib_poll(addr)
    description: |-
      Returns the serial-poll status from the device with address `addr`.
      Returns zero if command is sent successfully, Otherwise returns −1.

  ### VME Hardware Functions

  vme_get:
    signature: vme_get(addr[, dmode])
    description: |-
      Returns the data at `addr` in the 64K A16 address space.
  vme_put:
    signature: vme_put(addr, data[, dmode])
    description: |-
      Writes data to `addr` in the 64K A16 address space.
  vme_get32:
    signature: vme_get32(addr[, dmode])
    description: |-
      Returns the data at `addr` in the A32 address space.
  vme_put32:
    signature: vme_put32(addr, data[, dmode])
    description: |-
      Writes data to `addr` in the A32 address space.
  vme_move:
    signature: vme_move(from, to[, cnt[, dmode]])
    description: |-
      Copies data between a **spec** data array and VME A32 address space.
      One of the `from` and `to` arguments must be the name of a **spec** data array while the other must be a VME address.
      If the optional argument `cnt` is present, it designates how many data items (not bytes) to copy.
      If missing or zero, the number of elements in the array is copied.

  ###  PC Port I/O

  port_get:
    signature: port_get(addr)
    description: |-
      Reads one byte from the PC I/O port with the address `addr`.
      Resets to command level if the port has not been selected in the *config* file.
      Otherwise, returns the byte read.
  port_getw:
    signature: port_getw(addr)
    description: |-
      As above, but reads and returns a two-byte value.
  port_put:
    signature: port_put(addr, byte)
    description: |-
      Writes the byte `byte` to the PC I/O port with the address `addr`.
      Resets to command level if the port has not been selected for writing in the *config* file.
      Otherwise, returns zero.
  port_putw:
    signature: port_putw(addr, word)
    description: |-
      As above, but writes the two-byte value `word` to the I/O port.

  ### CAMAC (IEEE-583) Hardware Functions

  ca_get:
    signature: ca_get(device, address)
    description: |-
      The CAMAC module having device number `device`, as set in the *config* file, is read using *F* = 0 and *A* = `address` with the 24-bit value so obtained returned.
      Resets to command level if not configured for `device`.
  ca_put:
    signature: ca_put(x, device, address)
    description: |-
      This function is similar to `ca_get()`, except the 24-bit value `x` is written using *F* = 16.
      The actual number written is returned, which is the 24-bit integer representation of `x`.
      Resets to command level if not configured for `device`.
  ca_fna:
    signature: ca_fna(f, n, a[, v])
    description: |-
      Sends the arbitrary FNA command to the module in slot `n`.
      If the dataway command given by `f` is a write function, the 24-bit value to be written is contained in `v`.
      If the dataway command given by `f` is a read command, the function returns the 24-bit value obtained from the module.
      The user should avoid issuing commands that would cause a LAM and should certainly avoid issuing commands to slots that are being used for motor or counter control by **spec**’s internal hardware code.
  ca_cntl:
    signature: ca_cntl(cmd[, arg])
    description: |-
      Performs the selected CAMAC crate command according to the parameter `cmd`, as follows:

      - `"Z"` or `"init"` — performs a crate initialize (reset).
      - `"C"` or `"clear"` — performs a crate clear.
      - `"inhibit"` — set crate inhibit if `arg` is 1 and clears crate inhibit if `arg` is 0.

      During normal operation, you should not need to issue these commands.
      You should probably issue a `reconfig` after sending a crate initialize or clear.

  ### Not documented in spec_manA4.pdf. Instaed, cited from https://certif.com/spec_help/esrf.html.

  taco_io:
    signature: taco_io(...)
    comments: 'cited from [CSS spec help pages: esrf](https://certif.com/spec_help/esrf.html).'
    description: |-
      The ESRF data collector system can be accessed using the following functions. All devices must reside on `NETHOST`.
    overloads:
    - signature: taco_io(dev, cmd [, arg1_in [, arg2_in]] [, array_out]|[, grp, el])
      description: |-
        Allows general access to ESRF hardware device servers.
        The argument *dev* is the (case-insensitive) string name of the hardware device as specified in the corresponding device server documentation.
        The name might represent an entire VME module or it might represent an individual channel on a module.
        The argument *cmd* is the string name of a valid command for the device.
        Each command has associated specific input and output data types.
        At present, the following data types are supported.

        - `D_VOID_TYPE` — void
        - `D_BOOLEAN_TYPE` — Boolean
        - `D_SHORT_TYPE` — short
        - `D_USHORT_TYPE` — unsigned short
        - `D_LONG_TYPE` — long
        - `D_ULONG_TYPE` — unsigned long
        - `D_FLOAT_TYPE` — float
        - `D_DOUBLE_TYPE` — double
        - `D_STRING_TYPE` — string
        - `D_VAR_CHARARR` — char array
        - `D_VAR_SHORTARR` — short array
        - `D_VAR_LONGARR` — long array
        - `D_VAR_ULONGARR` — unsigned-long array
        - `D_VAR_FLOATARR` — float array
        - `D_VAR_DOUBLEARR` — double array
        - `D_VAR_STRINGARR` — string array
        - `D_INT_FLOAT_TYPE` — one long, one float
        - `D_MOTOR_FLOAT` — one long, one float
        - `D_ATTE_TYPE` — two shorts
        - `D_LONG_READPOINT` — two longs
        - `D_MOTOR_LONG` — two longs
        - `D_FLOAT_READPOINT` — two floats
        - `D_DOUBLE_READPOINT` — two doubles
        - `D_STATE_FLOAT_READPOINT` — one short, two floats
        - `D_VAR_GRPFPARR` — array of DevGrpFramePair objects

        The `D_VOID_TYPE` data type means no data value is to be passed.
        For scalar values, **spec** treats all data types as a double - the necessary conversions are automatic.
        The argument *arg1_in* is necessary if the command requires an input value.
        For the two-element composite types, *arg2_in* must also be provided.
        For array input types, *arg1_in* is the name of the array.
        For the `D_VAR_` array types (except for `D_VAR_STRINGARR`), *arg1_in* can be an associative array or a data array type.
        For commands that produce an output array or composite values, *array_out* is the name of an array to receive the values.
        Data arrays can only be used for `D_VAR_` array types (except for `D_VAR_STRINGARR`).
        For commands that produce an output array of numbers (not strings or composite data types), a data group and element can be specified as *grp* and *el*, and the received data will be placed there.
    - signature: taco_io("?" [, filter])
      description: |-
        A single `"?"` lists all the devices available on the current `NETHOST`.
        The optional filter argument can be used to limit the contents of the returned list and is in the usual DOMAIN/FAMILY/MEMBER format, where the `*` character can be used to match patterns in any of the three fields.
        See the TACO *db_getdevexp* man page for more information.
    - signature: taco_io(dev, "?")
      description: |-
        Lists the valid commands for the named device, along with the data types of any input and/or output arguments.
    - signature: taco_io(dev, "timeout", time)
      description: |-
        Sets the remote procedure call (RPC) timeout for the indicated device.
        The value of *time* is in seconds.
        If *time* is zero, the timeout is set to its original value.
        The function returns the timeout value.
    - signature: taco_io(dev, "reconnect")
      description: |-
        Closes the connection to the device via the `dev_free()` TACO function and reopens the connection to the same device using the same timeout and UDP/TCP protocol via `dev_import()`.
        This option allows remaking a connection without the overhead associated with complete hardware reinitialization that comes with `reconfig`.
    - signature: taco_io(dev, "udp"|"tcp")
      description: |-
        Sets the ethernet protocol for the named device.
  taco_db:
    signature: taco_db(...)
    comments: 'cited from [CSS spec help pages: esrf](https://certif.com/spec_help/esrf.html).'
    overloads:
    - signature: taco_dc(dev, "create", cmd, data_type)
      description: |-
        Creates a new pseudodevice for the data collector named *dev* having data accessed using the command *cmd* having data type *data_type*.
        The parameters *dev*, *cmd* and *data_type* are all strings.
        **spec** requires data collector devices it creates to have only one command.
        If the device already exists with a different command or with more than one command, the function fails.
        The *cmd* argument must be one of the commands recognized by the data collector.
        **spec** supports the following data types:

        - D_BOOLEAN_TYPE
        - D_SHORT_TYPE
        - D_LONG_TYPE
        - D_FLOAT_TYPE
        - D_DOUBLE_TYPE
        - D_STRING_TYPE
        - D_VAR_CHARARR
        - D_VAR_SHORTARR
        - D_VAR_LONGARR
        - D_VAR_ULONGARR
        - D_VAR_FLOATARR
        - D_VAR_DOUBLEARR
        - D_VAR_STRINGARR

        **spec** treats all data as either a string or a double.
        The necessary type conversions will be made on the data passed through `taco_dc()`.
    - signature: taco_dc(dev, "delete")
      description: |-
        Deletes the device *dev* from the data collector.
    - signature: taco_dc(dev, "put", data)
      description: |-
        Writes data to the device *dev*.
        The device must exist in the data collector and must only have one command.
        The *data* argument will be converted to the appropriate string or number data type, according to the data type required by the device's command.
        If the command uses an array data type, *data* should be an array name.
    - signature: taco_dc(dev, cmd)
      description: |-
        Returns the string or number value associated with the command *cmd* for device *dev*.
    - signature: taco_dc(dev, cmd, array_name)
      description: |-
        If the command *cmd* for device *dev* returns an array data type, *array_name* is the name of a **spec** array that will receive the string or number data.
        The function returns the number of elements in the array.
    - signature: taco_dc(dev, cmd, grp, el)
      description: |-
        If the command *cmd* for device *dev* returns an array data type containing number values, the arguments *grp* and *el* specify a **spec** data group and element number to receive the values.
        The function returns the number of elements in the array.
    - signature: taco_dc(dev, "?")
      description: |-
        Lists the commands and data types available for the device *dev*.
    - signature: taco_dc("?")
      description: |-
        Lists all the devices, commands and data types in the data collector for `NETHOST`.
  taco_dc:
    signature: taco_dc(...)
    comments: 'cited from [CSS spec help pages: esrf](https://certif.com/spec_help/esrf.html).'
    overloads:
    - signature: taco_db(dev, res)
      description: |-
        Returns a string containing the value of the resource *res* for the database item *dev*.
        The string *dev* is of the form *//facility/domain/family/member* or *domain/family/member*, with the default *facility* taken from the `NETHOST` environment variable.
        If there are multiple elements in the resource value, they are returned in a comma-separated list.
    - signature: taco_db(dev, res, value)
      description: |-
        The first two arguments are as above, with the resource *res* associated with *dev* being set to *value*.
        If multiple elements are required, the argument *value* should be a string in a comma-separated list.

  ### Not documented in spec_manA4.pdf. Instaed, cited from https://certif.com/spec_help/tango.html.

  tango_io:
    signature: tango_io(dev, ...)
    comments: 'cited from [CSS spec help pages: tango](https://certif.com/spec_help/tango.html).'
    overloads:
    - signature: tango_io(dev, "?")
      description: |-
        Lists the command properties for *dev* in a concise format, showing the input and output data types for each available command.
    - signature: tango_io(dev, "??")
      description: |-
        Lists the command properties for *dev* in a more verbose format, showing not only the input and output data types, but also the command description, as supplied by the TANGO server.
    - signature: tango_io(dev, cmd[, argin [, argout])
      description: |-
        Allows general access to TANGO devices.
        If *cmd* returns a scalar, the *argout* argument is optional.
        If present, the return value for *cmd* will be placed there and `tango_io()` will return zero on success.
        If absent, `tango_io()` will return the value for *cmd*.
        If *cmd* returns an array, the *argout* array argument is required.
        On success, `tango_io()` returns the number of elements in the array.
    - signature: tango_io(dev, "timeout")
      description: |-
        Returns the current connection timeout for *dev* in seconds.
    - signature: tango_io(dev, "timeout", sec)
      description: |-
        Sets the connection timeout for *dev* in seconds.
    - signature: tango_io(dev, "source")
      description: |-
        Returns the data source for *dev*.
        A value of 0 indicates data is read directly from the device.
        A value of 1 means data is read from the polling cache.
        A value of 2 indicates data is read from the cache or the device.
    - signature: tango_io(dev, "source", value)
      description: |-
        Sets the data source for *dev*. Allowed values are 0, 1 and 2, with meanings as described above.
  tango_get:
    signature: tango_get(dev, ...)
    comments: 'cited from [CSS spec help pages: tango](https://certif.com/spec_help/tango.html).'
    overloads:
    - signature: tango_get(dev, "?")
      description: |-
        Lists the attributes, the read-write permissions and data type for *dev* in a concise format.
    - signature: tango_get(dev, "??")
      description: |-
        Lists the attributes, the read-write permissions, data type and command description for *dev*.
    - signature: tango_get(dev, "?", attr)
      description: |-
        Displays elements of the attribute information structure for the selected attribute.
    - signature: tango_get(dev, "?", attr, info)
      description: |-
        Fills the associative array *info* with the elements of the attribute information structure for the selected attribute.
        Elements are indexed as shown:

        - `info["data_format"]` — Scalar, spectrum or image
        - `info["data_name"]` — Data type as a string
        - `info["data_type"]` — Data type code number
        - `info["description"]` — Description text
        - `info["disp_level"]` — Operator or expert
        - `info["display_unit"]` — Conversion factor to GUI display unit
        - `info["format"]` — Format specification string for GUI display
        - `info["label"]` — GUI label
        - `info["max_alarm"]` — Max value, checked when reading
        - `info["max_dim_x"]` — Max data size in X
        - `info["max_dim_y"]` — Max data size in Y
        - `info["max_value"]` — Max value, checked when writing
        - `info["min_alarm"]` — Min value, checked when reading
        - `info["min_value"]` — Min value, checked when writing
        - `info["name"]` — Attribute name
        - `info["standard_unit"]` — Conversion factor to MKS units
        - `info["unit"]` — Unit string
        - `info["writable"]` — Read, write, read_write or read_with_write
        - `info["writable_attr_name"]` — Needed for read_with_write

        In addition, the function returns an associative array containing the information.
    - signature: tango_get(dev, "timeout")
      description: |-
        Returns the current connection timeout for *dev* in seconds.
    - signature: tango_get(dev, "timeout", sec)
      description: |-
        Sets the connection timeout for *dev* in seconds.
        Returns -1 on error, otherwise returns the new timeout value.
    - signature: tango_get(dev, attr [, argout ] [, extras])
      description: |-
        Reads one device attribute.
        If the attribute is a `SPECTRUM` or `IMAGE` type, then the *argout* argument is needed and is the name of an associative or data array that will receive the attribute data.

        For `SCALAR` data types, the *argout* argument is optional.
        If present, *argout* will be assigned the value.
        If absent, the `tango_get()` call will return the value.
        With the optional *argout* argument, barring other errors, the return value of `tango_get()` will be zero unless the data quality is `INVALID`, in which case the return value is 1.
        Without the optional *argout* argument, if the data quality is `INVALID` the return value will be the string `"invalid"`.

        For `SPECTRUM` and `IMAGE` data types, the return value will be the number of array elements returned and the string `"invalid"` if the data quality is `INVALID`.

        If there is a TANGO error, the function returns -1, with the `TANGO_ERR` global variable set to the error message.

        If the optional argument *extras* is included, it must be an associative array.
        The elements of the *extras* array will be assigned attribute data elements indexed as follows:

        - `extras["data_name"]` — String name of data type
        - `extras["data_type"]` — Data scalar-type code
        - `extras["dim_x"]` — Data dimension for X
        - `extras["dim_y"]` — Data dimension for Y
        - `extras["name"]` — Attribute name
        - `extras["quality"]` — Data quality factor
        - `extras["time_stamp"]` — Time stamp

        For scalar data `"dim_y"` is zero.
        The quality factor values are as follows:

        - 0 — VALID
        - 1 — INVALID
        - 2 — ALARM
        - 3 — CHANGING
        - 4 — WARNING

        The `"time_stamp"` element contains the time in seconds and milliseconds from the UNIX epoch.
    - signature: tango_get(dev, at1, argout1, at2, argout2 [, ... ] [, extras])
      description: |-
        Reads multiple device attributes.
        An *argout* argument must be provided for each attribute, whether scalar or array.

        When reading multiple attributes, if there are no errors, the return value of `tango_get()` will be the number of attributes that have `INVALID` quality.
        If no attributes have `INVALID` quality, the return value is zero.
        The *extras* array will be needed to sort out which attributes have `INVALID` data.

        If there is a TANGO error, the function returns -1, with the `TANGO_ERR` global variable set to the error message.

        If present, the *extras* array will be two dimensional, with the first index being the attribute name and the second index as above.
  tango_put:
    signature: tango_put(dev, ...)
    comments: 'cited from [CSS spec help pages: tango](https://certif.com/spec_help/tango.html).'
    overloads:
    - signature: tango_put(dev, "?")
      description: |-
        Lists the attributes, the read-write permissions and data type for *dev* in a concise format.
    - signature: tango_put(dev, "??")
      description: |-
        Lists the attributes, the read-write permissions, data type and command description for *dev*.
    - signature: tango_put(dev, "timeout")
      description: |-
        Returns the current connection timeout for *dev* in seconds.
    - signature: tango_put(dev, "timeout", sec)
      description: |-
        Sets the connection timeout for *dev* in seconds.
        Returns -1 on error, otherwise returns the new timeout value.
    - signature: tango_put(dev, attr1, argin1[, attr2, argin2 [, ...]])
      description: |-
        Writes one or more device attributes.
        Each attribute is followed by its value. Attributes can be scalar or arrays.
        
        On success, the return value is 0.
        
        If there is a TANGO error, the function returns -1, with the `TANGO_ERR` global variable set to the error message.
  tango_db:
    signature: tango_db(...)

  ### Not documented in spec_manA4.pdf. Instaed, cited from https://certif.com/spec_help/epics.html.
  
  epics_get:
    signature: epics_get(ca_name[, type][, count])
    comments: 'cited from [CSS spec help pages: epics](https://certif.com/spec_help/epics.html).'
    description: |-
      Returns the result of a channel-access get of the process variable *ca_name*, as in `print epics_get("ioc:m1.VAL")`.
      By default, the native data type of the process variable will be retrieved over channel access.
      However, a different data type can be specified using the optional second argument.
      Possible types are `"char"`, `"short"`, `"long"`, `"float"`, `"double"`, `"enum"` and `"string"`.
      For `DBF_ENUM` data types, the string value of the process variable is returned, unless another type is specified.
      For array types, the entire array is retrieved and returned, unless the optional argument *count* specifies fewer elements (as of **spec** release 5.00.04).
      When requesting `"string"` for types other than `DBF_CHAR`, arrays will be returned as a **spec** string data array consisting of 40-byte rows, with as many rows as elements in the EPICS array.
      Each row will contain an ASCII representation of the corresponding value, with the rest of the row padded with null bytes.
      For `DBF_CHAR` data, the return value will be converted to an ordinary string (as of release 5.10.01-8).
      Note, any bytes following a null byte in the `DBF_CHAR` array will be lost.
      If a `"monitor"` has been set for the process variable using the `"monitor_set"` option below, the returned result will be the most recent value as set by the monitor call back.
      Otherwise (or if there has been no monitor call back), **spec** will access the process variable value using the standard channel access `ca_array_get()`.
  epics_put:
    signature: epics_put(ca_name, value[, wait_time])
    comments: 'cited from [CSS spec help pages: epics](https://certif.com/spec_help/epics.html).'
    description: |-
      Does a channel-access put of *value*, which can be either a string or a number, to the process variable *ca_name*.
      If the optional *wait_time* argument is set, **spec** will wait for a channel-access `"callback"` to indicate the value has been sent.
      **spec** will wait up to the specified number of seconds for that response.
      Such a feature might come in handy if the channel-access put is to start an acquisition device and one wants to insure the device is started before continuing.
      If the process variable is an array of a `DBF_CHAR` type, any non-array *value*, whether number or string, will be sent via channel access as a string, filling as many elements of the array as the string is long.
  epics_par:
    signature: epics_par(...)
    comments: 'cited from [CSS spec help pages: epics](https://certif.com/spec_help/epics.html).'
    overloads:
    - signature: epics_par(ca_name, what)
      description: |-
        Returns parameters associated with the process variable *ca_name*, according to the value of the string *what*, which may have the following values:
        
        - `"connect"` — Queues the call to make the initial connection for the designated process variable, but doesn't force a network packet to be sent. If many process variables are to be accessed from user level, it will be more efficient in terms of network access to use this `"connect"` option for each, before the individual `epics_get()` and `epics_put()` calls. (Available as of **spec** release 5.08.01-4.)
        - `"refresh"` — Closes then reopens the channel access connection. If a monitor has been set, it will be restored. (Available as of **spec** release 6.00.02.)
        - `"count"` — Returns the element count associated with *ca_name*.
        - `"host"` — Returns the host name for *ca_name* (EPICS 3.12 and above).
        - `"monitor_set"` — Creates a "monitor" for the indicated process variable.
        - `"monitor_check"` — If the indicated process variable has a monitor, returns the value 1 if the value of the process variable has changed since last read with `epics_get()`. Returns -1 if no monitor has been created and for other EPICS errors. Otherwise returns zero.
        - `"monitor_clear"` — Removes the monitor for the indicated process variable.
        - `"read_access"` — Returns nonzero if *ca_name* has read access (EPICS 3.12 and above).
        - `"timeout"` — Returns the value **spec** uses for the `ca_pend_io()` time-out parameter.
        - `"timestamp"` — Returns the EPICS timestamp associated with the indicated process variable. The value is converted to the seconds since the UNIX epoch (00:00:00 Jan 1, 1970 UTC - also the **spec** epoch - the EPICS epoch is marked exactly twenty years later) and includes the fractional part to nanosecond resolution. The value returned here can be used as an argument to **spec**'s `date()` function to print the time of day associated with the timestamp value. Note, for array EPICS process variables, the timestamp associated with the first element of the array is returned. (Available as of **spec** release 5.10.02-11.)
        - `"type"` — Returns a string (such as `"string"`, `"double"`, `"short"`, etc.) indicating the data type of *ca_name*.
        - `"write_access"` — Returns nonzero if *ca_name* has write access (EPICS 3.12 and above).
    - signature: epics_par(ca_name, what, value)
      description: |-
        Sets parameters associated with the process variable *ca_name*, according to the value of the string *what*, which may have the following values:

        - `"timeout"` — Sets the value **spec** uses for the `ca_pend_io()` time-out parameter.

  ### Not documented in spec_manA4.pdf. Instead, cited from https://certif.com/spec_help/gpib.html.

  gpib_par:
    signature: gpib_par(addr, "timeout" [, t])
    comments: 'cited from [CSS spec help pages: gpib](https://certif.com/spec_help/gpib.html).'
    description: |-
      Returns or sets the timeout for the device with address *addr*.
      The units are seconds.
      A value less than or equal to zero resets the timeout to the default value of three seconds.
      Timeouts are per device (rather than per controller). The timeouts only apply to the user-level GPIB commands.
      Timeouts used by built-in hardware support will continue to apply to that access. (As of **spec** release 5.09.02-3.)

  ### Not documented in spec_manA4.pdf. Instaed, cited from https://certif.com/spec_help/vxi11.html.

  vxi11_get:
    signature: vxi11_get(...)
    comments: 'cited from [CSS spec help pages: vxi11](https://certif.com/spec_help/vxi11.html).'
    overloads:
    - signature: vxi11_get("name")
      description: |-
        Reads up 8192 bytes from the device.
        A device will usually indicate a read is finished by setting the end bit, resulting in the transfer of less than the maximum number.
    - signature: vxi11_get("name", n)
      description: |-
        Reads up to *n* bytes.
    - signature: vxi11_get("name", d)
      description: |-
        Reads incoming bytes into the data array *d*.
        The size of *d* determines how many bytes are to be read.
        Sub-array syntax can be used to limit the number of bytes.
        The function returns the number of array elements read, or zero if the read times out.
        Note, no byte re-ordering is done for short- or long-integer data, and no format conversions are done for float or double data.
    - signature: vxi11_get("name", mode)
      description: |-
        If *mode* is the string `"byte"`, reads and returns one unsigned binary byte.
        If *mode* is the string `"short"`, reads two binary bytes and returns the short integer so formed.
        If *mode* is the string `"long"`, reads four binary bytes and returns the long integer so formed.
        The last two modes work the same on both *big-endian* and *little-endian* platforms. On both, the incoming data is treated as *big endian*.
        If the incoming data is *little endian*, use `"short_swap"` or `"long_swap"`.
  vxi11_put:
    signature: vxi11_put(...)
    comments: 'cited from [CSS spec help pages: vxi11](https://certif.com/spec_help/vxi11.html).'
    overloads:
    - signature: vxi11_put(name, s)
      description: |-
        Writes the string s to the device.
        Returns the number of bytes written.
    - signature: vxi11_put(name, d[, cnt])
      description: |-
        Writes the contents of the data array *d* to the device.
        By default, the entire array (or subarray, if specified) will be sent.
        The optional third argument *cnt* can be used to specify the number of array elements to send.
        For short and long integer arrays, the data will be sent using native byte order.
        The `"swap"` option of the `array_op()` function can be used to change the byte order, if necessary.
        No format conversions are available for float or double data.
        Returns the number of bytes written.
  vxi11_par:
    signature: vxi11_par(...)
    comments: 'cited from [CSS spec help pages: vxi11](https://certif.com/spec_help/vxi11.html).'
    overloads:
    - signature: vxi11_par("show")
      description: |-
        Lists the current open clients.
    - signature: vxi11_par("info")
      description: |-
        Returns a string that lists the current open clients.
    - signature: vxi11_par("timeout"[, t])
      description: |-
        Returns or sets the default timeout for the RPC calls. The units are seconds.
    - signature: vxi11_par("name", "timeout"[, t])
      description: |-
        Returns or sets the timeout for the named device.
        This value overrides the global default.
        The units are seconds.
    - signature: vxi11_par("name", "connect")
      description: |-
        Opens the RPC connection to the named device.
        Returns true if successful and false for failure.
        Connections are created automatically with the `vxi11_get()` and `vxi11_put()` functions.
        It is not necessary to use the `"connect"` option.
        However, it may be useful to check if a connection is possible.
        There is no difference in behavior for a connection opened using this `"connect"` option or one opened automatically with `vxi11_get()` or `vxi_put()`.
    - signature: vxi11_par("name", "close")
      description: |-
        Closes the RPC connection to the named device and frees associated resources.
        Returns true whether or not the named device is open.
        All connections are closed during a `reconfig`.

  ### Not documented in spec_manA4.pdf. Instaed, cited from https://certif.com/spec_help/hdf5.html.

  h5_file:
    signature: h5_file(...)
    comments: 'cited from [CSS spec help pages: hdf5](https://certif.com/spec_help/hdf5.html).'
    overloads:
    - signature: h5_file(filename, "open"[, "cache=bytes[[:slots]:policy]"])
      description: |-
        Opens *filename* if it exists or creates it if it doesn't.
        The HDF5 file remains open across calls, although all objects and resources created by `h5_attr()` and `h5_data()` are closed and released when those functions return.
        The optional argument sets the raw data chunk cache parameters for all data sets saved to the file as long as it remains open.
        The meaning of the parameters is explained above.
    - signature: h5_file(filename, "flush")
      description: |-
        Tells the HDF5 library to write buffered data for *filename* out to disk.
    - signature: h5_file(filename, "close")
      description: |-
        Closes *filename*.
    - signature: h5_file(filename)
      description: |-
        If more than one HDF5 file is open, makes *filename* the active one.
        If no HDF5 file is open, attempts to open *filename*. Returns **true** (1) for success.
    - signature: h5_file()
      description: |-
        Returns the name of the currently active HDF5 file, or the null string if no file is open.
  h5_attr:
    signature: h5_attr(...)
    comments: 'cited from [CSS spec help pages: hdf5](https://certif.com/spec_help/hdf5.html).'
    overloads:
    - signature: h5_attr(group_path, attribute_name, attribute_value[, option ...])
      description: |-
        Creates a new attribute with the name *attribute_name* and the value *attribute_value*.
        The *options* can be a **spec** data type as in the table above.
    - signature: h5_attr()
      description: |-
        With no arguments, returns the path of the current group.
    - signature: h5_attr(group_path)
      description: |-
        Sets the current group to *group_path*. A call such as `h5_attr("..")` moves the current group up one level.
  h5_data:
    signature: h5_data(...)
    comments: 'cited from [CSS spec help pages: hdf5](https://certif.com/spec_help/hdf5.html).'
    overloads:
    - signature: h5_data(group_path, dataset_name, dataset_value [, option ...])
      description: |-
        Creates a new dataset with the name *dataset_name* and the value *dataset_value*.
        The *options* can be a **spec** data type, as in the table above.
        Additional options include `"dims=[frames:]rows:columns"`, `"chunk=[frames:]rows:columns"`, `"cache=bytes[[:slots]:policy]"` and `"gzip[=deflation_factor]`.
    - signature: h5_data(group_path, dataset_name, dataset_value, "frame=#"|#)
      description: |-
        Adds *dataset_value* to the existing dataset at the specified frame or row number.
    - signature: h5_data(group_path, dataset_name, dataset_link, "link")
      description: |-
        Creates a dataset containing a hard link from *dataset_link* to *dataset_name*.
    - signature: h5_data()
      description: |-
        With no arguments, returns the path of the current group.
    - signature: h5_data(group_path)
      description: |-
        Sets the current group to *group_path*. A call such as `h5_attr("..")` moves the current group up one level.
  h5_link:
    signature: h5_link(group_path, link_name, target_file, target_object)
    comments: 'cited from [CSS spec help pages: hdf5](https://certif.com/spec_help/hdf5.html).'
    description: |-
      Creates a soft link named *link_name* pointing to the specified target object in the target file*.

  ### Not documented in spec_manA4.pdf.

  get_history:
    signature: get_history(num)
    comments: 'cited from [CSS spec help pages: chg6_07](https://www.certif.com/spec_help/chg6_07.html).'
    description: |-
      returns entries from the command-line history as a string.
      If `num` is positive, returns the specified history item.
      If `num` is negative, returns the item relative to the current history number.
      If no item exists at the specified number, returns an empty string.
      See the [history](https://www.certif.com/spec_help/history.html) help file for details.

  fbus_get:
    signature: fbus_get(...)
    comments: 'cited from [CSS spec help pages: chg6_08](https://www.certif.com/spec_help/chg6_08.html).'
    description: |-
      See the new [fbus](https://www.certif.com/spec_help/fbus.html) help file for details.
  fbus_put:
    signature: fbus_put(...)
    comments: 'cited from [CSS spec help pages: chg6_08](https://www.certif.com/spec_help/chg6_08.html).'
    description: |-
      See the new [fbus](https://www.certif.com/spec_help/fbus.html) help file for details.

  em_io:
    signature: em_io(...)
    comments: 'cited from [CSS spec help pages: chg6_08](https://www.certif.com/spec_help/chg6_08.html).'
    description: |-
      The built-in `em_io()` function has been renamed `madoca_io()`.
      See the [madoca](https://www.certif.com/spec_help/madoca.html) help file (formerly named [equipman](https://www.certif.com/spec_help/equipman.html)) for details.
  madoca_io:
    signature: madoca_io(...)
    comments: 'cited from [CSS spec help pages: chg6_08](https://www.certif.com/spec_help/chg6_08.html).'
    description: |-
      The built-in `em_io()` function has been renamed `madoca_io()`.
      See the [madoca](https://www.certif.com/spec_help/madoca.html) help file (formerly named [equipman](https://www.certif.com/spec_help/equipman.html)) for details.
  rpi_io:
    signature: rpi_io(...)
    comments: 'cited from [CSS spec help pages: chg6_09](https://www.certif.com/spec_help/chg6_09.html).'
    description: |-
      is a function for the Raspberry PI platform to allow access to the general purpose I/O (GPIO) pins.
      See the [rpi](https://www.certif.com/spec_help/rpi.html) help file for details.

macros:

  ## Utility Functions and Commands

  ### Miscellaneous

  lscmd:
    signature: lscmd [pattern ...]
    overloads:
    - signature: lscmd
      description: |-
        This command lists all the built-in commands, functions and keywords.
    - signature: lscmd pattern...
      description: |-
        As above, except only names matching `pattern` are listed.
  memstat:
    signature: memstat
    description: |-
      Shows the current memory usage.
  history:
    signature: history [N]
    overloads:
    - signature: history
      description: |-
        This command lists the most recently entered commands.
        The maximum number of commands can be set using the `spec_par("history_size")` command (see page 85) and defaults to 1000.
        See the description of the command-recall (history) feature on page 56.
    - signature: history N
      description: |-
        As above, but only prints the `N` most recent commands.
        If `N` is negative, the commands are printed in reverse order.
  savstate:
    signature: savstate
    description: |-
      Writes the current state to the state files.
      
      The *state* file contains the variables, macro definitions, output file names and additional parameter values unique to each user, terminal and diffractometer.
      A separate file stores the user’s command line history.
      The state files preserve the current situation when the user leaves the program, so that the same situation can be restored when the user later returns to the program.

      **spec** can be invoked with a **−u** *user* flag and a **−t** *tty* flag.
      These flags instruct the program to initialize the current user’s state from the files associated with the other user and/or terminal.
      Subsequent `savstate` commands access the user’s natural state file.

      The `savstate` command does not save the state files until the entire parsed mini-program in which the command occurs has been run.
      **spec** also automatically does a `savstate` before re-reading the hardware *config* file when the `reconfig` command is entered and when **spec** exits.
      Note, a *show_state* utility is included in the **spec** distribution.
      This utility can display the contents of **spec** state files.
      Type `show_state −` to see the utility’s usage message.

  ## Keyboard and File Input, Screen and File Output

  ### Text Output

  print:
    signature: print a[, b...]
    description: |-
      Prints the string value of each argument, adding a space between each string.
      If the argument is an associative array, each element of the array is printed in a list, as in:

      ```
      21.FOURC> print mA
      mA["0"] = 2
      mA["1"] = 0
      mA["2"] = 1
      mA["3"] = 3
      22.FOURC>
      ```

      If the argument is a data array, the contents of the array are printed in a compressed format, as in:

      ```
      22.FOURC> array data[64][64]; data[0] = 1; data[1] = 2
      23.FOURC> print data
      {{1 <64 repeats>}, {2 <64 repeats>}, {0 <64 repeats>} <62 repeats>}
      24.FOURC>
      ```
  eprint:
    signature: eprint a[, b...]
    description: |-
      As above, except that if an error-log file is open, the generated string will also be written to that file prefixed by the `#E` characters.

  ## Variables

  delete:
    signature: delete assoc_array[elem] ...
    description: |-
      Removes the element `elem` of the associative array *assoc-array*.
  syms:
    signature: syms [−v] [+|−BGLADNSIC] [pattern ...]
    description: |-
      Lists **spec**’s current variables.
      Without arguments, all the variables are listed, along with their memory consumption and type.
      With the `−v` flag, the variables are listed along with their values in a format that can be saved to a file and read back as commands.
      If arguments are given as `pattern`, only symbols matching the arguments are printed.
      Such arguments may contain the `?` and `*` metacharacters.

      In addition, the type of symbols listed can be controlled using the flags in the following table where a `−` flag prevents symbols with the given attribute from being listed and a `+` flag includes symbols with the given attribute in the list.

      - `B` Built-In
      - `G` Global
      - `L` Local
      - `A` Associative array
      - `D` Data array
      - `N` Number type
      - `S` String type
      - `I` Immutable attribute
      - `C` Constant attribute

  ## Macros

  ### Built-In Commands

  prdef:
    signature: prdef [pattern ...]
    overloads:
    - signature: prdef
      description: |-
        Displays all macro definitions.
        The displayed definitions are prepended with `def name  '` and terminated with `'` so if saved to a file, the definitions can be read back.
        (See the standard macro savmac on page 162.)
    - signature: prdef pattern ...
      description: |-
        As above, except only macro names matching `pattern` are listed, where `pattern` may contain the metacharacters `?` or `*`, which have the usual meaning: `?` matches any single character and `*` matches any string.
  lsdef:
    signature: lsdef [pattern ...]
    overloads:
    - signature: lsdef
      description: |-
        Lists the name and the number of characters in each macro definition.
    - signature: lsdef pattern ...
      description: |-
        As above, except only macro names matching `pattern` are listed, where `pattern` may contain the metacharacters `?` or `*`.

  ### Built-In Macro Names
  
  begin_mac:
    signature: (manual invocation is not intended)
    description: |-
      If a macro by this name exists, it will be run after reading the hardware configuration file and all the start-up command files, but before reading commands from the keyboard.
  end_mac:
    signature: (manual invocation is not intended)
    description: |-
      If a macro by this name exists, it will be run when **spec** exits from either a **^D** or a `quit` command.
  config_mac:
    signature: (manual invocation is not intended)
    description: |-
      If a macro by this name exists, it will be run after reading the configuration file at start up and after the `reconfig` command is executed.
  prompt_mac:
    signature: (manual invocation is not intended)
    description: |-
      If a macro by this name exists, it will always be run just before **spec** issues the main, level-zero prompt.
      If an error occurs while running `prompt_mac`, it will be automatically undefined.
  cleanup:
    signature: (manual invocation is not intended)
    description: |-
        If either or both exists, they will be run whenever an error is encountered, the `exit` command is encountered, or a user types **^C**.
        The `cleanup` macro is run first.
        After running the clean-up macros, **spec** gives the standard prompt and waits for the next command from the keyboard.
  cleanup1:
    signature: (manual invocation is not intended)
    description: |-
        If either or both exists, they will be run whenever an error is encountered, the `exit` command is encountered, or a user types **^C**.
        The `cleanup` macro is run first.
        After running the clean-up macros, **spec** gives the standard prompt and waits for the next command from the keyboard.
  cleanup_once:
    signature: (manual invocation is not intended)
    description: |-
      A clean-up macro that is always deleted before a new **spec** main prompt is issued.
      If defined, its definition will be pushed on to the input stream whenever an error is encountered, the `exit` command is encountered, or a user types **^C**.
  cleanup_always:
    signature: (manual invocation is not intended)
    description: |-
      Like `cleanup_once`, but its definition is not removed except by an explicit `undef` command.

  ### Controlling Motors

  move_all:
    signature: move_all
    description: |-
      This command sets motors in motion.
      The sequence of events is as follows.
      For some motor controllers, **spec** first examines the controller registers of all nonbusy motors and makes sure the contents agree with the current positions in program memory.
      If there is a discrepancy, the user is asked to choose the correct position.
      Next, **spec** prepares to move all motors that are not already at the positions specified in the built-in `A[]` array, interpreted in user units.
      A motor will not be moved if it is currently moving or if it is marked as protected (via the configuration file) or unusable (due to failure of a hardware presence test).
      If the target position of any of the motors is outside the software limits, the entire move is canceled, and the program resets to command level.
      Otherwise, the motors are started, and the command returns.

      The sequence of commands when using `move_all` should almost always be,

      ```
      wait(1) # Wait for moving to finish
      read_motors(0) # Put current positions of all motors in A[] (Assign new values to elements of A[] to be moved)
      move_all # Move to those positions
      ```

      If `read_motors()` is called before the motors have stopped, the values in `A[]` will reflect the motor positions before they stopped.
      If `read_motors()` is not called at all, or if you do not explicitly assign a value to each element of `A[]`, then you will not know for sure where some motors will be going when `move_all` is called.

      A **^C** halts moving, as does the `sync` command.
  move_cnt:
    signature: move_cnt
    description: |-
      This command is similar to `move_all`, but with the following differences.
      Just before the motors are started, the clock/timer is enabled and programmed to gate the scalers with a longer-than-necessary count time.
      The motors are then started at the base rate set in the *config* file, but are not accelerated to the steady-state rate.
      No backlash correction is done at the end of the move.
      When the move is completed, the clock/timer is stopped.
      The `move_cnt` command is used in powder-averaging scans.
      (See the powder-mode macros on page 178.)
  sync:
    signature: sync
    description: |-
      If any motors are moving, they are halted.
      The motor positions maintained by the motor controller are then compared with the motor positions currently set in the program.
      If there is a discrepancy, the user is asked which should be changed.
      The `sync` command is used to place the motor hardware in a known state and is supposed to fix any problems in communicating with the controllers.

  ### Counting

  getcounts:
    signature: getcounts
    description: |-
      Loads the built-in array `S[]` with the contents of the scalers.

  ### Miscellaneous

  reconfig:
    signature: reconfig
    description: |-
      Reconfigures the hardware.
      This command obtains any modified configuration information, including hardware devices and types, CAMAC slot assignments and motor parameters and settings, from the *config* and settings files.
      The sequence of events is as follows:

      First, **spec** waits for all asynchronous activity (moving and counting) to finish.
      It then does a sync of the motor controller registers, comparing them with the internal program positions.
      Next, all open devices are closed.
      The *config* file is then read to obtain the configuration information, and the program opens and possibly does hardware presence tests on the selected devices.
      Finally, the internal program motor positions are updated from the settings file and then resynchronized with the motor hardware.

  # Keywords

keywords:

  ## Macros

  ### Built-In Commands

  def:
    signature: def name 'string'
    description: |-
      Defines a macro named `name` to be `string`.
      Each time `name` occurs on input, it is replaced with `string`.
      The definition is made immediately, so the macro can be used later in the same statement block in which it is defined and can be redefined within the same statement block.

      Note that the macro definition is made regardless of any surrounding flow control statements, since the enclosing mini-program is not yet completely parsed and is not executing.
  rdef:
    signature: rdef name expression
    description: |-
      Defines a macro named `name` to be `expression`, which is almost always a string constant.
      Each time `name` occurs on input, the value `expression` is substituted. Unlike `def`, described above, the macro definition is not made until all the encompassing statement blocks are parsed and the resulting mini-program is executed.
      Consider the following example.

      ```
      if (flag == 1)
              rdef plot "onp;offt;lp_plot;ont;plot_res;offp"
      else if (flag == 2)
              rdef plot "splot;onp;offt;lp_plot;plot_res;ont;offp"
      else if (flag == 3)
              rdef plot "onp;plot_res;offp"
      else
        rdef plot ""
      ```

      Clearly, it is necessary for the mini-program to be parsed and executed to decide which is the appropriate definition to assign to the `plot` macro.
  undef:
    signature: undef name...
    description: |-
      Removes the named macros, which can be ordinary macros, macro functions or `cdef()` macros.

  ## Variables

  global:
    signature: global name ...
    description: |-
      Declares `name` to be a global symbol.
      A global symbol retains its value after each parsed program is executed.
      If `name` is used as an array name, each element of the array is global.
      By appending empty square brackets to name the type of the symbol can be forced to be an associative array, which may be useful if `name` is to be used as an argument to a macro function before its type has been established by usage.
  unglobal:
    signature: unglobal name ...
    description: |-
      Makes the global or constant symbol `name` no longer global.
  constant:
    signature: constant name [=] expression
    description: |-
      Declares `name` to be a constant, global symbol having the value given by `expression`.
      A constant symbol cannot be changed by assignment.
  local:
    signature: local name ...
    description: |-
      Allows reuse of a preexisting name and gives the new instance of that name scope only within the statement block in which it is defined.
      The name may be that of a macro, in which case the macro definition is unavailable within the statement block.
      By appending empty square brackets to `name` the type of the symbol can be forced to be an associative array, which may be useful if `name` is to be used as an argument to a macro function before its type has been established by usage.
  array:
    signature: array
    overloads:
    - signature: '[[extern] shared] [type] array var[cols]'
      description: |-
        Declares a one-dimensional data array.
    - signature: '[[extern] shared] [type] array var[rows][cols]'
      description: |-
        Declares a two-dimensional data array.

  ## Flow Control

  ### Break Statement

  break:
    signature: break
    description: |-
      The statement `break` terminates the smallest enclosing `while` or `for` loop.

  ### Continue Statement

  continue:
    signature: continue
    description: |-
      The statement `continue` passes control to the loop-test portion of the smallest enclosing `while` or `for` loop.

  ## Exit Statement

  exit:
    signature: exit
    description: |-
      The statement `exit` terminates execution of the current parse tree and jumps control back to command level just as if an error occurred or a **^C** was typed.

  ## added by the language support developer
  
  quit:
    signature: quit
    description: |-
      The `quit` command can’t be included in a macro.
